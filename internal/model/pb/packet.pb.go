// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.0
// source: packet.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProducerData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DataByte      []byte                 `protobuf:"bytes,1,opt,name=dataByte,proto3" json:"dataByte,omitempty"`
	LineNo        string                 `protobuf:"bytes,2,opt,name=lineNo,proto3" json:"lineNo,omitempty"`
	TaskId        string                 `protobuf:"bytes,3,opt,name=taskId,proto3" json:"taskId,omitempty"`
	Direction     uint32                 `protobuf:"varint,4,opt,name=direction,proto3" json:"direction,omitempty"`
	IsAlert       bool                   `protobuf:"varint,5,opt,name=isAlert,proto3" json:"isAlert,omitempty"`
	SId           int64                  `protobuf:"varint,6,opt,name=sId,proto3" json:"sId,omitempty"`
	ClassType     string                 `protobuf:"bytes,7,opt,name=classType,proto3" json:"classType,omitempty"`
	EventMSG      string                 `protobuf:"bytes,8,opt,name=eventMSG,proto3" json:"eventMSG,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProducerData) Reset() {
	*x = ProducerData{}
	mi := &file_packet_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProducerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProducerData) ProtoMessage() {}

func (x *ProducerData) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProducerData.ProtoReflect.Descriptor instead.
func (*ProducerData) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{0}
}

func (x *ProducerData) GetDataByte() []byte {
	if x != nil {
		return x.DataByte
	}
	return nil
}

func (x *ProducerData) GetLineNo() string {
	if x != nil {
		return x.LineNo
	}
	return ""
}

func (x *ProducerData) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ProducerData) GetDirection() uint32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *ProducerData) GetIsAlert() bool {
	if x != nil {
		return x.IsAlert
	}
	return false
}

func (x *ProducerData) GetSId() int64 {
	if x != nil {
		return x.SId
	}
	return 0
}

func (x *ProducerData) GetClassType() string {
	if x != nil {
		return x.ClassType
	}
	return ""
}

func (x *ProducerData) GetEventMSG() string {
	if x != nil {
		return x.EventMSG
	}
	return ""
}

type ProtocolData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	N             string                 `protobuf:"bytes,1,opt,name=n,proto3" json:"n,omitempty"`
	Sn            string                 `protobuf:"bytes,2,opt,name=sn,proto3" json:"sn,omitempty"`
	Sz            string                 `protobuf:"bytes,3,opt,name=sz,proto3" json:"sz,omitempty"`
	Ps            string                 `protobuf:"bytes,4,opt,name=ps,proto3" json:"ps,omitempty"`
	F             []*ProtocolField       `protobuf:"bytes,5,rep,name=f,proto3" json:"f,omitempty"`
	Fl            int32                  `protobuf:"varint,6,opt,name=fl,proto3" json:"fl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProtocolData) Reset() {
	*x = ProtocolData{}
	mi := &file_packet_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtocolData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolData) ProtoMessage() {}

func (x *ProtocolData) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolData.ProtoReflect.Descriptor instead.
func (*ProtocolData) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{1}
}

func (x *ProtocolData) GetN() string {
	if x != nil {
		return x.N
	}
	return ""
}

func (x *ProtocolData) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *ProtocolData) GetSz() string {
	if x != nil {
		return x.Sz
	}
	return ""
}

func (x *ProtocolData) GetPs() string {
	if x != nil {
		return x.Ps
	}
	return ""
}

func (x *ProtocolData) GetF() []*ProtocolField {
	if x != nil {
		return x.F
	}
	return nil
}

func (x *ProtocolData) GetFl() int32 {
	if x != nil {
		return x.Fl
	}
	return 0
}

type ProtocolField struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	N             string                 `protobuf:"bytes,1,opt,name=n,proto3" json:"n,omitempty"`
	Sn            string                 `protobuf:"bytes,2,opt,name=sn,proto3" json:"sn,omitempty"`
	Sz            string                 `protobuf:"bytes,3,opt,name=sz,proto3" json:"sz,omitempty"`
	Ps            string                 `protobuf:"bytes,4,opt,name=ps,proto3" json:"ps,omitempty"`
	Sh            string                 `protobuf:"bytes,5,opt,name=sh,proto3" json:"sh,omitempty"`
	V             string                 `protobuf:"bytes,6,opt,name=v,proto3" json:"v,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProtocolField) Reset() {
	*x = ProtocolField{}
	mi := &file_packet_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtocolField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolField) ProtoMessage() {}

func (x *ProtocolField) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolField.ProtoReflect.Descriptor instead.
func (*ProtocolField) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{2}
}

func (x *ProtocolField) GetN() string {
	if x != nil {
		return x.N
	}
	return ""
}

func (x *ProtocolField) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *ProtocolField) GetSz() string {
	if x != nil {
		return x.Sz
	}
	return ""
}

func (x *ProtocolField) GetPs() string {
	if x != nil {
		return x.Ps
	}
	return ""
}

func (x *ProtocolField) GetSh() string {
	if x != nil {
		return x.Sh
	}
	return ""
}

func (x *ProtocolField) GetV() string {
	if x != nil {
		return x.V
	}
	return ""
}

type EdtData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	P             string                 `protobuf:"bytes,1,opt,name=p,proto3" json:"p,omitempty"`
	S             string                 `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
	D             string                 `protobuf:"bytes,3,opt,name=d,proto3" json:"d,omitempty"`
	Desc          string                 `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EdtData) Reset() {
	*x = EdtData{}
	mi := &file_packet_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EdtData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdtData) ProtoMessage() {}

func (x *EdtData) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdtData.ProtoReflect.Descriptor instead.
func (*EdtData) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{3}
}

func (x *EdtData) GetP() string {
	if x != nil {
		return x.P
	}
	return ""
}

func (x *EdtData) GetS() string {
	if x != nil {
		return x.S
	}
	return ""
}

func (x *EdtData) GetD() string {
	if x != nil {
		return x.D
	}
	return ""
}

func (x *EdtData) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type PacketResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pi            *EdtData               `protobuf:"bytes,1,opt,name=pi,proto3" json:"pi,omitempty"`
	P             []*ProtocolData        `protobuf:"bytes,2,rep,name=p,proto3" json:"p,omitempty"`
	Pl            int32                  `protobuf:"varint,3,opt,name=pl,proto3" json:"pl,omitempty"`
	S             bool                   `protobuf:"varint,4,opt,name=s,proto3" json:"s,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PacketResult) Reset() {
	*x = PacketResult{}
	mi := &file_packet_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PacketResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketResult) ProtoMessage() {}

func (x *PacketResult) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketResult.ProtoReflect.Descriptor instead.
func (*PacketResult) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{4}
}

func (x *PacketResult) GetPi() *EdtData {
	if x != nil {
		return x.Pi
	}
	return nil
}

func (x *PacketResult) GetP() []*ProtocolData {
	if x != nil {
		return x.P
	}
	return nil
}

func (x *PacketResult) GetPl() int32 {
	if x != nil {
		return x.Pl
	}
	return 0
}

func (x *PacketResult) GetS() bool {
	if x != nil {
		return x.S
	}
	return false
}

type ConsumerData struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	NegTimestamp    int64                  `protobuf:"varint,1,opt,name=negTimestamp,proto3" json:"negTimestamp,omitempty"`
	SessionId       string                 `protobuf:"bytes,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	TaskId          string                 `protobuf:"bytes,3,opt,name=taskId,proto3" json:"taskId,omitempty"`
	LineNo          string                 `protobuf:"bytes,4,opt,name=lineNo,proto3" json:"lineNo,omitempty"`
	EventId         string                 `protobuf:"bytes,5,opt,name=eventId,proto3" json:"eventId,omitempty"`
	VictimId        string                 `protobuf:"bytes,6,opt,name=victimId,proto3" json:"victimId,omitempty"`
	DataByte        []byte                 `protobuf:"bytes,7,opt,name=dataByte,proto3" json:"dataByte,omitempty"`
	CreateTime      *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Direction       uint32                 `protobuf:"varint,9,opt,name=direction,proto3" json:"direction,omitempty"`
	SrcMac          string                 `protobuf:"bytes,10,opt,name=srcMac,proto3" json:"srcMac,omitempty"`
	SrcIP           string                 `protobuf:"bytes,11,opt,name=srcIP,proto3" json:"srcIP,omitempty"`
	SrcPort         uint32                 `protobuf:"varint,12,opt,name=srcPort,proto3" json:"srcPort,omitempty"`
	DstMac          string                 `protobuf:"bytes,13,opt,name=dstMac,proto3" json:"dstMac,omitempty"`
	DstIP           string                 `protobuf:"bytes,14,opt,name=dstIP,proto3" json:"dstIP,omitempty"`
	DstPort         uint32                 `protobuf:"varint,15,opt,name=dstPort,proto3" json:"dstPort,omitempty"`
	Protocol        string                 `protobuf:"bytes,16,opt,name=protocol,proto3" json:"protocol,omitempty"`
	ProtocolType    uint32                 `protobuf:"varint,17,opt,name=protocolType,proto3" json:"protocolType,omitempty"`
	TransportLayer  string                 `protobuf:"bytes,18,opt,name=transportLayer,proto3" json:"transportLayer,omitempty"`
	EThType         string                 `protobuf:"bytes,19,opt,name=eThType,proto3" json:"eThType,omitempty"`
	IPVersion       string                 `protobuf:"bytes,20,opt,name=iPVersion,proto3" json:"iPVersion,omitempty"`
	Action          string                 `protobuf:"bytes,21,opt,name=action,proto3" json:"action,omitempty"`
	SId             int64                  `protobuf:"varint,22,opt,name=sId,proto3" json:"sId,omitempty"`
	EventType       string                 `protobuf:"bytes,23,opt,name=eventType,proto3" json:"eventType,omitempty"`
	EventDesc       string                 `protobuf:"bytes,24,opt,name=eventDesc,proto3" json:"eventDesc,omitempty"`
	IsAttack        bool                   `protobuf:"varint,25,opt,name=isAttack,proto3" json:"isAttack,omitempty"`
	ErrType         uint32                 `protobuf:"varint,26,opt,name=errType,proto3" json:"errType,omitempty"`
	IsKey           bool                   `protobuf:"varint,27,opt,name=isKey,proto3" json:"isKey,omitempty"`
	IsVul           bool                   `protobuf:"varint,28,opt,name=isVul,proto3" json:"isVul,omitempty"`
	EventLevel      uint32                 `protobuf:"varint,29,opt,name=eventLevel,proto3" json:"eventLevel,omitempty"`
	Vul             string                 `protobuf:"bytes,30,opt,name=vul,proto3" json:"vul,omitempty"`
	SrcCountry      string                 `protobuf:"bytes,31,opt,name=srcCountry,proto3" json:"srcCountry,omitempty"`
	DstCountry      string                 `protobuf:"bytes,32,opt,name=dstCountry,proto3" json:"dstCountry,omitempty"`
	SrcProvince     string                 `protobuf:"bytes,33,opt,name=srcProvince,proto3" json:"srcProvince,omitempty"`
	DstProvince     string                 `protobuf:"bytes,34,opt,name=dstProvince,proto3" json:"dstProvince,omitempty"`
	SrcCity         string                 `protobuf:"bytes,35,opt,name=srcCity,proto3" json:"srcCity,omitempty"`
	DstCity         string                 `protobuf:"bytes,36,opt,name=dstCity,proto3" json:"dstCity,omitempty"`
	LatitudeSrc     float32                `protobuf:"fixed32,37,opt,name=latitudeSrc,proto3" json:"latitudeSrc,omitempty"`
	LongitudeSrc    float32                `protobuf:"fixed32,38,opt,name=longitudeSrc,proto3" json:"longitudeSrc,omitempty"`
	LatitudeDst     float32                `protobuf:"fixed32,39,opt,name=latitudeDst,proto3" json:"latitudeDst,omitempty"`
	LongitudeDst    float32                `protobuf:"fixed32,40,opt,name=longitudeDst,proto3" json:"longitudeDst,omitempty"`
	Vendor          string                 `protobuf:"bytes,41,opt,name=vendor,proto3" json:"vendor,omitempty"`
	DeviceType      string                 `protobuf:"bytes,42,opt,name=deviceType,proto3" json:"deviceType,omitempty"`
	Model           string                 `protobuf:"bytes,43,opt,name=model,proto3" json:"model,omitempty"`
	MetaRaw         string                 `protobuf:"bytes,44,opt,name=metaRaw,proto3" json:"metaRaw,omitempty"`
	ActionClassCode int32                  `protobuf:"varint,45,opt,name=actionClassCode,proto3" json:"actionClassCode,omitempty"`
	Meta            []*ProtocolData        `protobuf:"bytes,46,rep,name=meta,proto3" json:"meta,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ConsumerData) Reset() {
	*x = ConsumerData{}
	mi := &file_packet_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsumerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumerData) ProtoMessage() {}

func (x *ConsumerData) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumerData.ProtoReflect.Descriptor instead.
func (*ConsumerData) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{5}
}

func (x *ConsumerData) GetNegTimestamp() int64 {
	if x != nil {
		return x.NegTimestamp
	}
	return 0
}

func (x *ConsumerData) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ConsumerData) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ConsumerData) GetLineNo() string {
	if x != nil {
		return x.LineNo
	}
	return ""
}

func (x *ConsumerData) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *ConsumerData) GetVictimId() string {
	if x != nil {
		return x.VictimId
	}
	return ""
}

func (x *ConsumerData) GetDataByte() []byte {
	if x != nil {
		return x.DataByte
	}
	return nil
}

func (x *ConsumerData) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ConsumerData) GetDirection() uint32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *ConsumerData) GetSrcMac() string {
	if x != nil {
		return x.SrcMac
	}
	return ""
}

func (x *ConsumerData) GetSrcIP() string {
	if x != nil {
		return x.SrcIP
	}
	return ""
}

func (x *ConsumerData) GetSrcPort() uint32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *ConsumerData) GetDstMac() string {
	if x != nil {
		return x.DstMac
	}
	return ""
}

func (x *ConsumerData) GetDstIP() string {
	if x != nil {
		return x.DstIP
	}
	return ""
}

func (x *ConsumerData) GetDstPort() uint32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *ConsumerData) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *ConsumerData) GetProtocolType() uint32 {
	if x != nil {
		return x.ProtocolType
	}
	return 0
}

func (x *ConsumerData) GetTransportLayer() string {
	if x != nil {
		return x.TransportLayer
	}
	return ""
}

func (x *ConsumerData) GetEThType() string {
	if x != nil {
		return x.EThType
	}
	return ""
}

func (x *ConsumerData) GetIPVersion() string {
	if x != nil {
		return x.IPVersion
	}
	return ""
}

func (x *ConsumerData) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ConsumerData) GetSId() int64 {
	if x != nil {
		return x.SId
	}
	return 0
}

func (x *ConsumerData) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *ConsumerData) GetEventDesc() string {
	if x != nil {
		return x.EventDesc
	}
	return ""
}

func (x *ConsumerData) GetIsAttack() bool {
	if x != nil {
		return x.IsAttack
	}
	return false
}

func (x *ConsumerData) GetErrType() uint32 {
	if x != nil {
		return x.ErrType
	}
	return 0
}

func (x *ConsumerData) GetIsKey() bool {
	if x != nil {
		return x.IsKey
	}
	return false
}

func (x *ConsumerData) GetIsVul() bool {
	if x != nil {
		return x.IsVul
	}
	return false
}

func (x *ConsumerData) GetEventLevel() uint32 {
	if x != nil {
		return x.EventLevel
	}
	return 0
}

func (x *ConsumerData) GetVul() string {
	if x != nil {
		return x.Vul
	}
	return ""
}

func (x *ConsumerData) GetSrcCountry() string {
	if x != nil {
		return x.SrcCountry
	}
	return ""
}

func (x *ConsumerData) GetDstCountry() string {
	if x != nil {
		return x.DstCountry
	}
	return ""
}

func (x *ConsumerData) GetSrcProvince() string {
	if x != nil {
		return x.SrcProvince
	}
	return ""
}

func (x *ConsumerData) GetDstProvince() string {
	if x != nil {
		return x.DstProvince
	}
	return ""
}

func (x *ConsumerData) GetSrcCity() string {
	if x != nil {
		return x.SrcCity
	}
	return ""
}

func (x *ConsumerData) GetDstCity() string {
	if x != nil {
		return x.DstCity
	}
	return ""
}

func (x *ConsumerData) GetLatitudeSrc() float32 {
	if x != nil {
		return x.LatitudeSrc
	}
	return 0
}

func (x *ConsumerData) GetLongitudeSrc() float32 {
	if x != nil {
		return x.LongitudeSrc
	}
	return 0
}

func (x *ConsumerData) GetLatitudeDst() float32 {
	if x != nil {
		return x.LatitudeDst
	}
	return 0
}

func (x *ConsumerData) GetLongitudeDst() float32 {
	if x != nil {
		return x.LongitudeDst
	}
	return 0
}

func (x *ConsumerData) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ConsumerData) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *ConsumerData) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ConsumerData) GetMetaRaw() string {
	if x != nil {
		return x.MetaRaw
	}
	return ""
}

func (x *ConsumerData) GetActionClassCode() int32 {
	if x != nil {
		return x.ActionClassCode
	}
	return 0
}

func (x *ConsumerData) GetMeta() []*ProtocolData {
	if x != nil {
		return x.Meta
	}
	return nil
}

var File_packet_proto protoreflect.FileDescriptor

var file_packet_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xde, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x42, 0x79, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x42, 0x79, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x53, 0x47, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x53, 0x47, 0x22, 0x81, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x7a, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x7a, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x70, 0x73, 0x12, 0x23, 0x0a, 0x01, 0x66, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x01, 0x66, 0x12, 0x0e, 0x0a, 0x02,
	0x66, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x66, 0x6c, 0x22, 0x6b, 0x0a, 0x0d,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0c, 0x0a,
	0x01, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x73,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x73,
	0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x7a, 0x12, 0x0e, 0x0a, 0x02, 0x70,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x70, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x73,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x68, 0x12, 0x0c, 0x0a, 0x01, 0x76,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x76, 0x22, 0x47, 0x0a, 0x07, 0x45, 0x64, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x01, 0x70, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x73,
	0x12, 0x0c, 0x0a, 0x01, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x22, 0x71, 0x0a, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x02, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x45, 0x64, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x02, 0x70, 0x69, 0x12, 0x22, 0x0a, 0x01, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x01, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x70, 0x6c, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x01, 0x73, 0x22, 0xd6, 0x0a, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x65, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6e, 0x65,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x42, 0x79, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x42, 0x79, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x4d, 0x61, 0x63, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x72, 0x63, 0x4d, 0x61, 0x63, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x72, 0x63, 0x49, 0x50, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x72, 0x63,
	0x49, 0x50, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x73,
	0x74, 0x4d, 0x61, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x73, 0x74, 0x49, 0x50, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x73, 0x74, 0x49, 0x50, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x73, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x54, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x54, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x50, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x50, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x56, 0x75, 0x6c, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x56, 0x75, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03,
	0x76, 0x75, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x75, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x72, 0x63, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x43, 0x69, 0x74, 0x79, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x72, 0x63, 0x43, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x73, 0x74, 0x43, 0x69, 0x74, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x73, 0x74, 0x43, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x53, 0x72, 0x63, 0x18, 0x25, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x53, 0x72, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x53, 0x72, 0x63, 0x18, 0x26, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x53, 0x72, 0x63, 0x12, 0x20, 0x0a, 0x0b,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x44, 0x73, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x44, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x44, 0x73, 0x74, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x44,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x61, 0x52, 0x61, 0x77, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x61, 0x52, 0x61, 0x77, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x2e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x1b,
	0x5a, 0x19, 0x64, 0x69, 0x73, 0x73, 0x65, 0x63, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_packet_proto_rawDescOnce sync.Once
	file_packet_proto_rawDescData = file_packet_proto_rawDesc
)

func file_packet_proto_rawDescGZIP() []byte {
	file_packet_proto_rawDescOnce.Do(func() {
		file_packet_proto_rawDescData = protoimpl.X.CompressGZIP(file_packet_proto_rawDescData)
	})
	return file_packet_proto_rawDescData
}

var file_packet_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_packet_proto_goTypes = []any{
	(*ProducerData)(nil),          // 0: packet.ProducerData
	(*ProtocolData)(nil),          // 1: packet.ProtocolData
	(*ProtocolField)(nil),         // 2: packet.ProtocolField
	(*EdtData)(nil),               // 3: packet.EdtData
	(*PacketResult)(nil),          // 4: packet.PacketResult
	(*ConsumerData)(nil),          // 5: packet.ConsumerData
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
}
var file_packet_proto_depIdxs = []int32{
	2, // 0: packet.ProtocolData.f:type_name -> packet.ProtocolField
	3, // 1: packet.PacketResult.pi:type_name -> packet.EdtData
	1, // 2: packet.PacketResult.p:type_name -> packet.ProtocolData
	6, // 3: packet.ConsumerData.createTime:type_name -> google.protobuf.Timestamp
	1, // 4: packet.ConsumerData.meta:type_name -> packet.ProtocolData
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_packet_proto_init() }
func file_packet_proto_init() {
	if File_packet_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_packet_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_packet_proto_goTypes,
		DependencyIndexes: file_packet_proto_depIdxs,
		MessageInfos:      file_packet_proto_msgTypes,
	}.Build()
	File_packet_proto = out.File
	file_packet_proto_rawDesc = nil
	file_packet_proto_goTypes = nil
	file_packet_proto_depIdxs = nil
}
