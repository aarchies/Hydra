// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.0
// source: meta/protocol/omron_fins.proto

package push_model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OmronFinsInfo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Sa2               *uint32                `protobuf:"varint,1,opt,name=sa2" json:"sa2,omitempty"`                              //	源单元地址
	Sna               *string                `protobuf:"bytes,2,opt,name=sna" json:"sna,omitempty"`                               //源网络地址
	Command           *uint32                `protobuf:"varint,3,opt,name=command" json:"command,omitempty"`                      //	欧姆龙命令代码
	Da1               *uint32                `protobuf:"varint,4,opt,name=da1" json:"da1,omitempty"`                              //目标节点编号
	Sa1               *uint32                `protobuf:"varint,5,opt,name=sa1" json:"sa1,omitempty"`                              //源节点编号
	Da2               *uint32                `protobuf:"varint,6,opt,name=da2" json:"da2,omitempty"`                              //目标单元地址
	ParAreacode       *uint32                `protobuf:"varint,7,opt,name=parAreacode" json:"parAreacode,omitempty"`              //	欧姆龙参数区域代码
	ProgramNum        *uint32                `protobuf:"varint,8,opt,name=programNum" json:"programNum,omitempty"`                //	欧姆龙程序编号
	Gct               *uint32                `protobuf:"varint,9,opt,name=gct" json:"gct,omitempty"`                              //	网关计数（或网关数量）
	ProgramAreaSize   *uint32                `protobuf:"varint,10,opt,name=programAreaSize" json:"programAreaSize,omitempty"`     //程序区大小
	Dna               *string                `protobuf:"bytes,11,opt,name=dna" json:"dna,omitempty"`                              //	目的网络地址
	Modecode          *uint32                `protobuf:"varint,12,opt,name=modecode" json:"modecode,omitempty"`                   //欧姆龙模式代码
	Status            *bool                  `protobuf:"varint,13,opt,name=status" json:"status,omitempty"`                       //	欧姆龙状态
	TypeOfMemCard     *string                `protobuf:"bytes,14,opt,name=typeOfMemCard" json:"typeOfMemCard,omitempty"`          //	内存卡的种类
	Commanddata       *string                `protobuf:"bytes,15,opt,name=commanddata" json:"commanddata,omitempty"`              //	欧姆龙命令数据
	CounterSize       *uint32                `protobuf:"varint,16,opt,name=counterSize" json:"counterSize,omitempty"`             //定时器/计数器大小
	Responsecode      *uint32                `protobuf:"varint,17,opt,name=responsecode" json:"responsecode,omitempty"`           //欧姆龙响应代码
	Failcycletimeover *bool                  `protobuf:"varint,18,opt,name=failcycletimeover" json:"failcycletimeover,omitempty"` //	欧姆龙致命周期时间超时
	MemError          *bool                  `protobuf:"varint,19,opt,name=memError" json:"memError,omitempty"`                   //	间接数据内存错误指示
	FailCpuBusError   *bool                  `protobuf:"varint,20,opt,name=failCpuBusError" json:"failCpuBusError,omitempty"`     //	欧姆龙致命 CPU 总线错误
	Diskno            *uint32                `protobuf:"varint,21,opt,name=diskno" json:"diskno,omitempty"`                       //欧姆龙磁盘编号
	Parameter         *string                `protobuf:"bytes,22,opt,name=parameter" json:"parameter,omitempty"`                  //	欧姆龙协议的参数
	Volumeparcode     *uint32                `protobuf:"varint,23,opt,name=volumeparcode" json:"volumeparcode,omitempty"`         //	欧姆龙体积参数代码
	Transferparcode   *uint32                `protobuf:"varint,24,opt,name=transferparcode" json:"transferparcode,omitempty"`     //	欧姆龙传输参数代码
	Fileparcode       *uint32                `protobuf:"varint,25,opt,name=fileparcode" json:"fileparcode,omitempty"`             //	欧姆龙文件参数代码
	Type              *string                `protobuf:"bytes,26,opt,name=type" json:"type,omitempty"`                            //欧姆龙协议类型
	Datatypetype      *string                `protobuf:"bytes,27,opt,name=datatypetype" json:"datatypetype,omitempty"`            //	欧姆龙数据类型类型
	CtrModel          *string                `protobuf:"bytes,28,opt,name=ctrModel" json:"ctrModel,omitempty"`                    //	欧姆龙控制器型号
	CtrVersion        *string                `protobuf:"bytes,29,opt,name=ctrVersion" json:"ctrVersion,omitempty"`                //欧姆龙控制器版本
	Tcpmagic          *uint32                `protobuf:"varint,30,opt,name=tcpmagic" json:"tcpmagic,omitempty"`                   //	欧姆龙 TCP 魔术字节，标识作用
	Tcplength         *uint32                `protobuf:"varint,31,opt,name=tcplength" json:"tcplength,omitempty"`                 //	欧姆龙 TCP 协议数据长度
	Tcpcommand        *uint32                `protobuf:"varint,32,opt,name=tcpcommand" json:"tcpcommand,omitempty"`               //	欧姆龙 TCP 命令
	Tcperrorcode      *uint32                `protobuf:"varint,33,opt,name=tcperrorcode" json:"tcperrorcode,omitempty"`           //	欧姆龙 TCP 错误代码
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *OmronFinsInfo) Reset() {
	*x = OmronFinsInfo{}
	mi := &file_meta_protocol_omron_fins_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OmronFinsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmronFinsInfo) ProtoMessage() {}

func (x *OmronFinsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_meta_protocol_omron_fins_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmronFinsInfo.ProtoReflect.Descriptor instead.
func (*OmronFinsInfo) Descriptor() ([]byte, []int) {
	return file_meta_protocol_omron_fins_proto_rawDescGZIP(), []int{0}
}

func (x *OmronFinsInfo) GetSa2() uint32 {
	if x != nil && x.Sa2 != nil {
		return *x.Sa2
	}
	return 0
}

func (x *OmronFinsInfo) GetSna() string {
	if x != nil && x.Sna != nil {
		return *x.Sna
	}
	return ""
}

func (x *OmronFinsInfo) GetCommand() uint32 {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return 0
}

func (x *OmronFinsInfo) GetDa1() uint32 {
	if x != nil && x.Da1 != nil {
		return *x.Da1
	}
	return 0
}

func (x *OmronFinsInfo) GetSa1() uint32 {
	if x != nil && x.Sa1 != nil {
		return *x.Sa1
	}
	return 0
}

func (x *OmronFinsInfo) GetDa2() uint32 {
	if x != nil && x.Da2 != nil {
		return *x.Da2
	}
	return 0
}

func (x *OmronFinsInfo) GetParAreacode() uint32 {
	if x != nil && x.ParAreacode != nil {
		return *x.ParAreacode
	}
	return 0
}

func (x *OmronFinsInfo) GetProgramNum() uint32 {
	if x != nil && x.ProgramNum != nil {
		return *x.ProgramNum
	}
	return 0
}

func (x *OmronFinsInfo) GetGct() uint32 {
	if x != nil && x.Gct != nil {
		return *x.Gct
	}
	return 0
}

func (x *OmronFinsInfo) GetProgramAreaSize() uint32 {
	if x != nil && x.ProgramAreaSize != nil {
		return *x.ProgramAreaSize
	}
	return 0
}

func (x *OmronFinsInfo) GetDna() string {
	if x != nil && x.Dna != nil {
		return *x.Dna
	}
	return ""
}

func (x *OmronFinsInfo) GetModecode() uint32 {
	if x != nil && x.Modecode != nil {
		return *x.Modecode
	}
	return 0
}

func (x *OmronFinsInfo) GetStatus() bool {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return false
}

func (x *OmronFinsInfo) GetTypeOfMemCard() string {
	if x != nil && x.TypeOfMemCard != nil {
		return *x.TypeOfMemCard
	}
	return ""
}

func (x *OmronFinsInfo) GetCommanddata() string {
	if x != nil && x.Commanddata != nil {
		return *x.Commanddata
	}
	return ""
}

func (x *OmronFinsInfo) GetCounterSize() uint32 {
	if x != nil && x.CounterSize != nil {
		return *x.CounterSize
	}
	return 0
}

func (x *OmronFinsInfo) GetResponsecode() uint32 {
	if x != nil && x.Responsecode != nil {
		return *x.Responsecode
	}
	return 0
}

func (x *OmronFinsInfo) GetFailcycletimeover() bool {
	if x != nil && x.Failcycletimeover != nil {
		return *x.Failcycletimeover
	}
	return false
}

func (x *OmronFinsInfo) GetMemError() bool {
	if x != nil && x.MemError != nil {
		return *x.MemError
	}
	return false
}

func (x *OmronFinsInfo) GetFailCpuBusError() bool {
	if x != nil && x.FailCpuBusError != nil {
		return *x.FailCpuBusError
	}
	return false
}

func (x *OmronFinsInfo) GetDiskno() uint32 {
	if x != nil && x.Diskno != nil {
		return *x.Diskno
	}
	return 0
}

func (x *OmronFinsInfo) GetParameter() string {
	if x != nil && x.Parameter != nil {
		return *x.Parameter
	}
	return ""
}

func (x *OmronFinsInfo) GetVolumeparcode() uint32 {
	if x != nil && x.Volumeparcode != nil {
		return *x.Volumeparcode
	}
	return 0
}

func (x *OmronFinsInfo) GetTransferparcode() uint32 {
	if x != nil && x.Transferparcode != nil {
		return *x.Transferparcode
	}
	return 0
}

func (x *OmronFinsInfo) GetFileparcode() uint32 {
	if x != nil && x.Fileparcode != nil {
		return *x.Fileparcode
	}
	return 0
}

func (x *OmronFinsInfo) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *OmronFinsInfo) GetDatatypetype() string {
	if x != nil && x.Datatypetype != nil {
		return *x.Datatypetype
	}
	return ""
}

func (x *OmronFinsInfo) GetCtrModel() string {
	if x != nil && x.CtrModel != nil {
		return *x.CtrModel
	}
	return ""
}

func (x *OmronFinsInfo) GetCtrVersion() string {
	if x != nil && x.CtrVersion != nil {
		return *x.CtrVersion
	}
	return ""
}

func (x *OmronFinsInfo) GetTcpmagic() uint32 {
	if x != nil && x.Tcpmagic != nil {
		return *x.Tcpmagic
	}
	return 0
}

func (x *OmronFinsInfo) GetTcplength() uint32 {
	if x != nil && x.Tcplength != nil {
		return *x.Tcplength
	}
	return 0
}

func (x *OmronFinsInfo) GetTcpcommand() uint32 {
	if x != nil && x.Tcpcommand != nil {
		return *x.Tcpcommand
	}
	return 0
}

func (x *OmronFinsInfo) GetTcperrorcode() uint32 {
	if x != nil && x.Tcperrorcode != nil {
		return *x.Tcperrorcode
	}
	return 0
}

var File_meta_protocol_omron_fins_proto protoreflect.FileDescriptor

var file_meta_protocol_omron_fins_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f,
	0x6f, 0x6d, 0x72, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0xe3, 0x07, 0x0a, 0x0d, 0x4f, 0x6d, 0x72, 0x6f, 0x6e,
	0x46, 0x69, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x61, 0x32, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x61, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6e,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6e, 0x61, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x31, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x64, 0x61, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x61, 0x31, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x61, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61,
	0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x64, 0x61, 0x32, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x61, 0x72, 0x41, 0x72, 0x65, 0x61, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x41, 0x72, 0x65, 0x61, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x75, 0x6d, 0x12, 0x10,
	0x0a, 0x03, 0x67, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x67, 0x63, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x41, 0x72, 0x65, 0x61, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x41, 0x72, 0x65, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6e,
	0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6e, 0x61, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6d, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x4d, 0x65, 0x6d, 0x43, 0x61, 0x72,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x4d,
	0x65, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x76, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x65, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x6d, 0x65, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c,
	0x43, 0x70, 0x75, 0x42, 0x75, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x43, 0x70, 0x75, 0x42, 0x75, 0x73, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x6e, 0x6f, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x6e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x70, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x70, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x70, 0x61, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x70, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65,
	0x70, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66,
	0x69, 0x6c, 0x65, 0x70, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x74, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x74, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x74, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x74, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x63, 0x70, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x74, 0x63, 0x70, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x63,
	0x70, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74,
	0x63, 0x70, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x63, 0x70, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x63,
	0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x63, 0x70, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x74, 0x63, 0x70, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x2f, 0x5a, 0x2d,
	0x64, 0x69, 0x73, 0x73, 0x65, 0x63, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f,
	0x70, 0x62, 0x3b, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
}

var (
	file_meta_protocol_omron_fins_proto_rawDescOnce sync.Once
	file_meta_protocol_omron_fins_proto_rawDescData = file_meta_protocol_omron_fins_proto_rawDesc
)

func file_meta_protocol_omron_fins_proto_rawDescGZIP() []byte {
	file_meta_protocol_omron_fins_proto_rawDescOnce.Do(func() {
		file_meta_protocol_omron_fins_proto_rawDescData = protoimpl.X.CompressGZIP(file_meta_protocol_omron_fins_proto_rawDescData)
	})
	return file_meta_protocol_omron_fins_proto_rawDescData
}

var file_meta_protocol_omron_fins_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_meta_protocol_omron_fins_proto_goTypes = []any{
	(*OmronFinsInfo)(nil), // 0: meta.OmronFinsInfo
}
var file_meta_protocol_omron_fins_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_meta_protocol_omron_fins_proto_init() }
func file_meta_protocol_omron_fins_proto_init() {
	if File_meta_protocol_omron_fins_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_meta_protocol_omron_fins_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meta_protocol_omron_fins_proto_goTypes,
		DependencyIndexes: file_meta_protocol_omron_fins_proto_depIdxs,
		MessageInfos:      file_meta_protocol_omron_fins_proto_msgTypes,
	}.Build()
	File_meta_protocol_omron_fins_proto = out.File
	file_meta_protocol_omron_fins_proto_rawDesc = nil
	file_meta_protocol_omron_fins_proto_goTypes = nil
	file_meta_protocol_omron_fins_proto_depIdxs = nil
}
