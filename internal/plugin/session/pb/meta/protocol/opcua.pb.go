// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.0
// source: meta/protocol/opcua.proto

package push_model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OpcUaInfo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Transportmms      *uint32                `protobuf:"varint,1,opt,name=transportmms" json:"transportmms,omitempty"`           // 最大消息尺寸
	Transportsize     *uint32                `protobuf:"varint,2,opt,name=transportsize" json:"transportsize,omitempty"`         // 传输消息大小
	Securityseq       *uint32                `protobuf:"varint,3,opt,name=securityseq" json:"securityseq,omitempty"`             // 安全序列编号
	Transportchunk    *string                `protobuf:"bytes,4,opt,name=transportchunk" json:"transportchunk,omitempty"`        //传输块类型
	Securityrqid      *uint32                `protobuf:"varint,5,opt,name=securityrqid" json:"securityrqid,omitempty"`           // 请求标识
	Securityrcthumb   *string                `protobuf:"bytes,6,opt,name=securityrcthumb" json:"securityrcthumb,omitempty"`      // 接收方证书指纹
	IsLocalInfo       *bool                  `protobuf:"varint,7,opt,name=isLocalInfo" json:"isLocalInfo,omitempty"`             // 是否有本地信息
	IsServerIndex     *bool                  `protobuf:"varint,8,opt,name=isServerIndex" json:"isServerIndex,omitempty"`         // 是否有服务器索引
	IsText            *bool                  `protobuf:"varint,9,opt,name=isText" json:"isText,omitempty"`                       // 是否有文本
	IsDiagnosisCode   *bool                  `protobuf:"varint,10,opt,name=isDiagnosisCode" json:"isDiagnosisCode,omitempty"`    // 是否有内部诊断代码
	Loctextmask       *uint32                `protobuf:"varint,11,opt,name=loctextmask" json:"loctextmask,omitempty"`            // 编码掩码，用于特定编码
	IsBinaryBody      *bool                  `protobuf:"varint,12,opt,name=isBinaryBody" json:"isBinaryBody,omitempty"`          // 是否有二进制主体
	Transporttype     *string                `protobuf:"bytes,13,opt,name=transporttype" json:"transporttype,omitempty"`         // 传输消息的类型
	Securityscert     *string                `protobuf:"bytes,14,opt,name=securityscert" json:"securityscert,omitempty"`         // 发送方证书
	Transportmcc      *uint32                `protobuf:"varint,15,opt,name=transportmcc" json:"transportmcc,omitempty"`          // 最大分块数量
	InternalCode      *uint32                `protobuf:"varint,16,opt,name=internalCode" json:"internalCode,omitempty"`          // 服务等级/内部状态码
	Returndiag        *bool                  `protobuf:"varint,17,opt,name=returndiag" json:"returndiag,omitempty"`              // 返回诊断信息的
	OpInternalCode    *uint32                `protobuf:"varint,18,opt,name=opInternalCode" json:"opInternalCode,omitempty"`      // 操作层内状态码
	Transportendpoint *string                `protobuf:"bytes,19,opt,name=transportendpoint" json:"transportendpoint,omitempty"` // OPCUA 传输端点的 URL 地址
	DiagnosisCode     *string                `protobuf:"bytes,20,opt,name=diagnosisCode" json:"diagnosisCode,omitempty"`         // 服务等级/内部诊断信息
	UserTokenType     *uint32                `protobuf:"varint,21,opt,name=UserTokenType" json:"UserTokenType,omitempty"`        // OPCUA 用户令牌类型
	CreatedAt         *string                `protobuf:"bytes,22,opt,name=createdAt" json:"createdAt,omitempty"`                 // 创建时间
	TimeType          *uint32                `protobuf:"varint,23,opt,name=timeType" json:"timeType,omitempty"`                  // 返回的时间戳类型
	ApplicationType   *uint32                `protobuf:"varint,24,opt,name=applicationType" json:"applicationType,omitempty"`    // OPCUA 应用类型
	AuditEntryId      *string                `protobuf:"bytes,25,opt,name=auditEntryId" json:"auditEntryId,omitempty"`           // 审计项标识
	IssuedTokenType   *uint32                `protobuf:"varint,26,opt,name=issuedTokenType" json:"issuedTokenType,omitempty"`    // OPC UA 颁发令牌类型
	RevisedLifetime   *uint32                `protobuf:"varint,27,opt,name=revisedLifetime" json:"revisedLifetime,omitempty"`    // 修订后的生命周期
	ServerCertificate *string                `protobuf:"bytes,28,opt,name=serverCertificate" json:"serverCertificate,omitempty"` // 服务器证书
	SecurityLevel     *uint32                `protobuf:"varint,29,opt,name=securityLevel" json:"securityLevel,omitempty"`        //  OPCUA 安全级别
	ServiceResult     *uint32                `protobuf:"varint,30,opt,name=serviceResult" json:"serviceResult,omitempty"`        // 服务结果
	Token             *uint32                `protobuf:"varint,31,opt,name=token" json:"token,omitempty"`                        // 令牌标识
	PolicyId          *uint32                `protobuf:"varint,32,opt,name=policyId" json:"policyId,omitempty"`                  // OPCUA 协议策略 ID
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *OpcUaInfo) Reset() {
	*x = OpcUaInfo{}
	mi := &file_meta_protocol_opcua_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpcUaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpcUaInfo) ProtoMessage() {}

func (x *OpcUaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_meta_protocol_opcua_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpcUaInfo.ProtoReflect.Descriptor instead.
func (*OpcUaInfo) Descriptor() ([]byte, []int) {
	return file_meta_protocol_opcua_proto_rawDescGZIP(), []int{0}
}

func (x *OpcUaInfo) GetTransportmms() uint32 {
	if x != nil && x.Transportmms != nil {
		return *x.Transportmms
	}
	return 0
}

func (x *OpcUaInfo) GetTransportsize() uint32 {
	if x != nil && x.Transportsize != nil {
		return *x.Transportsize
	}
	return 0
}

func (x *OpcUaInfo) GetSecurityseq() uint32 {
	if x != nil && x.Securityseq != nil {
		return *x.Securityseq
	}
	return 0
}

func (x *OpcUaInfo) GetTransportchunk() string {
	if x != nil && x.Transportchunk != nil {
		return *x.Transportchunk
	}
	return ""
}

func (x *OpcUaInfo) GetSecurityrqid() uint32 {
	if x != nil && x.Securityrqid != nil {
		return *x.Securityrqid
	}
	return 0
}

func (x *OpcUaInfo) GetSecurityrcthumb() string {
	if x != nil && x.Securityrcthumb != nil {
		return *x.Securityrcthumb
	}
	return ""
}

func (x *OpcUaInfo) GetIsLocalInfo() bool {
	if x != nil && x.IsLocalInfo != nil {
		return *x.IsLocalInfo
	}
	return false
}

func (x *OpcUaInfo) GetIsServerIndex() bool {
	if x != nil && x.IsServerIndex != nil {
		return *x.IsServerIndex
	}
	return false
}

func (x *OpcUaInfo) GetIsText() bool {
	if x != nil && x.IsText != nil {
		return *x.IsText
	}
	return false
}

func (x *OpcUaInfo) GetIsDiagnosisCode() bool {
	if x != nil && x.IsDiagnosisCode != nil {
		return *x.IsDiagnosisCode
	}
	return false
}

func (x *OpcUaInfo) GetLoctextmask() uint32 {
	if x != nil && x.Loctextmask != nil {
		return *x.Loctextmask
	}
	return 0
}

func (x *OpcUaInfo) GetIsBinaryBody() bool {
	if x != nil && x.IsBinaryBody != nil {
		return *x.IsBinaryBody
	}
	return false
}

func (x *OpcUaInfo) GetTransporttype() string {
	if x != nil && x.Transporttype != nil {
		return *x.Transporttype
	}
	return ""
}

func (x *OpcUaInfo) GetSecurityscert() string {
	if x != nil && x.Securityscert != nil {
		return *x.Securityscert
	}
	return ""
}

func (x *OpcUaInfo) GetTransportmcc() uint32 {
	if x != nil && x.Transportmcc != nil {
		return *x.Transportmcc
	}
	return 0
}

func (x *OpcUaInfo) GetInternalCode() uint32 {
	if x != nil && x.InternalCode != nil {
		return *x.InternalCode
	}
	return 0
}

func (x *OpcUaInfo) GetReturndiag() bool {
	if x != nil && x.Returndiag != nil {
		return *x.Returndiag
	}
	return false
}

func (x *OpcUaInfo) GetOpInternalCode() uint32 {
	if x != nil && x.OpInternalCode != nil {
		return *x.OpInternalCode
	}
	return 0
}

func (x *OpcUaInfo) GetTransportendpoint() string {
	if x != nil && x.Transportendpoint != nil {
		return *x.Transportendpoint
	}
	return ""
}

func (x *OpcUaInfo) GetDiagnosisCode() string {
	if x != nil && x.DiagnosisCode != nil {
		return *x.DiagnosisCode
	}
	return ""
}

func (x *OpcUaInfo) GetUserTokenType() uint32 {
	if x != nil && x.UserTokenType != nil {
		return *x.UserTokenType
	}
	return 0
}

func (x *OpcUaInfo) GetCreatedAt() string {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return ""
}

func (x *OpcUaInfo) GetTimeType() uint32 {
	if x != nil && x.TimeType != nil {
		return *x.TimeType
	}
	return 0
}

func (x *OpcUaInfo) GetApplicationType() uint32 {
	if x != nil && x.ApplicationType != nil {
		return *x.ApplicationType
	}
	return 0
}

func (x *OpcUaInfo) GetAuditEntryId() string {
	if x != nil && x.AuditEntryId != nil {
		return *x.AuditEntryId
	}
	return ""
}

func (x *OpcUaInfo) GetIssuedTokenType() uint32 {
	if x != nil && x.IssuedTokenType != nil {
		return *x.IssuedTokenType
	}
	return 0
}

func (x *OpcUaInfo) GetRevisedLifetime() uint32 {
	if x != nil && x.RevisedLifetime != nil {
		return *x.RevisedLifetime
	}
	return 0
}

func (x *OpcUaInfo) GetServerCertificate() string {
	if x != nil && x.ServerCertificate != nil {
		return *x.ServerCertificate
	}
	return ""
}

func (x *OpcUaInfo) GetSecurityLevel() uint32 {
	if x != nil && x.SecurityLevel != nil {
		return *x.SecurityLevel
	}
	return 0
}

func (x *OpcUaInfo) GetServiceResult() uint32 {
	if x != nil && x.ServiceResult != nil {
		return *x.ServiceResult
	}
	return 0
}

func (x *OpcUaInfo) GetToken() uint32 {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return 0
}

func (x *OpcUaInfo) GetPolicyId() uint32 {
	if x != nil && x.PolicyId != nil {
		return *x.PolicyId
	}
	return 0
}

var File_meta_protocol_opcua_proto protoreflect.FileDescriptor

var file_meta_protocol_opcua_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f,
	0x6f, 0x70, 0x63, 0x75, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x22, 0x9b, 0x09, 0x0a, 0x09, 0x4f, 0x70, 0x63, 0x55, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x6d, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x6d, 0x6d, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x73, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x72,
	0x71, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x72, 0x71, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x72, 0x63, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x72, 0x63, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x54,
	0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c,
	0x6f, 0x63, 0x74, 0x65, 0x78, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x74, 0x65, 0x78, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x22, 0x0a,
	0x0c, 0x69, 0x73, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x73, 0x63, 0x65, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x73, 0x63, 0x65, 0x72, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x6d, 0x63, 0x63, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x6d, 0x63,
	0x63, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x64,
	0x69, 0x61, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x64, 0x69, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f,
	0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x65, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x65, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x42,
	0x2f, 0x5a, 0x2d, 0x64, 0x69, 0x73, 0x73, 0x65, 0x63, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
}

var (
	file_meta_protocol_opcua_proto_rawDescOnce sync.Once
	file_meta_protocol_opcua_proto_rawDescData = file_meta_protocol_opcua_proto_rawDesc
)

func file_meta_protocol_opcua_proto_rawDescGZIP() []byte {
	file_meta_protocol_opcua_proto_rawDescOnce.Do(func() {
		file_meta_protocol_opcua_proto_rawDescData = protoimpl.X.CompressGZIP(file_meta_protocol_opcua_proto_rawDescData)
	})
	return file_meta_protocol_opcua_proto_rawDescData
}

var file_meta_protocol_opcua_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_meta_protocol_opcua_proto_goTypes = []any{
	(*OpcUaInfo)(nil), // 0: meta.OpcUaInfo
}
var file_meta_protocol_opcua_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_meta_protocol_opcua_proto_init() }
func file_meta_protocol_opcua_proto_init() {
	if File_meta_protocol_opcua_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_meta_protocol_opcua_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meta_protocol_opcua_proto_goTypes,
		DependencyIndexes: file_meta_protocol_opcua_proto_depIdxs,
		MessageInfos:      file_meta_protocol_opcua_proto_msgTypes,
	}.Build()
	File_meta_protocol_opcua_proto = out.File
	file_meta_protocol_opcua_proto_rawDesc = nil
	file_meta_protocol_opcua_proto_goTypes = nil
	file_meta_protocol_opcua_proto_depIdxs = nil
}
