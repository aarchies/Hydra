// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.0
// source: meta/protocol/ethernet_ip.proto

package push_model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EtherNetIpInfo struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	GenState             *uint32                `protobuf:"varint,1,opt,name=genState" json:"genState,omitempty"`                        //	通用状态
	Class                *uint32                `protobuf:"varint,2,opt,name=class" json:"class,omitempty"`                              // cip 协议的类别
	EkeyCompbit          *bool                  `protobuf:"varint,3,opt,name=ekeyCompbit" json:"ekeyCompbit,omitempty"`                  // 兼容性相关的控制位
	Port                 *uint32                `protobuf:"varint,4,opt,name=port" json:"port,omitempty"`                                // 客户端 IP 端口
	LogicalSegmentType   *uint32                `protobuf:"varint,5,opt,name=logicalSegmentType" json:"logicalSegmentType,omitempty"`    // CIP 逻辑段类型
	LogicalSegmentFormat *string                `protobuf:"bytes,6,opt,name=logicalSegmentFormat" json:"logicalSegmentFormat,omitempty"` // 逻辑段格式的含义作用
	DeviceType           *uint32                `protobuf:"varint,7,opt,name=deviceType" json:"deviceType,omitempty"`                    // 设备类型
	EkeyDevType          *string                `protobuf:"bytes,8,opt,name=ekeyDevType" json:"ekeyDevType,omitempty"`                   // cip.ekey.devtype 表示设备类型
	CipState             *uint32                `protobuf:"varint,9,opt,name=cipState" json:"cipState,omitempty"`                        // CIP 协议的状态
	BitHeader            *uint32                `protobuf:"varint,10,opt,name=bitHeader" json:"bitHeader,omitempty"`                     // 32 位头部，包含协议信息
	State                *uint32                `protobuf:"varint,11,opt,name=state" json:"state,omitempty"`                             // 通用状态
	Priority             *uint32                `protobuf:"varint,12,opt,name=priority" json:"priority,omitempty"`                       // 优先级
	Type                 *uint32                `protobuf:"varint,13,opt,name=type" json:"type,omitempty"`                               // 服务类型
	TargetSupplierId     *uint32                `protobuf:"varint,14,opt,name=targetSupplierId" json:"targetSupplierId,omitempty"`       // 目标供应商 ID
	Cmextstatus          *uint32                `protobuf:"varint,15,opt,name=cmextstatus" json:"cmextstatus,omitempty"`                 // 扩展状态（CIP 通信协议字段）
	CmfWofv              *uint32                `protobuf:"varint,16,opt,name=cmfWofv" json:"cmfWofv,omitempty"`                         // 连接尺寸类型
	CmfWotype            *uint32                `protobuf:"varint,17,opt,name=cmfWotype" json:"cmfWotype,omitempty"`                     //连接类型（cip.cm.fwo.type）
	CmfWoowner           *uint32                `protobuf:"varint,18,opt,name=cmfWoowner" json:"cmfWoowner,omitempty"`                   //cip.cm.fwo.owner 字段表示所有者
	Ccosc                *uint32                `protobuf:"varint,19,opt,name=ccosc" json:"ccosc,omitempty"`                             // cip 中服务
	PcccFncCode          *uint32                `protobuf:"varint,20,opt,name=pcccFncCode" json:"pcccFncCode,omitempty"`                 // 协议字段的功能代码
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *EtherNetIpInfo) Reset() {
	*x = EtherNetIpInfo{}
	mi := &file_meta_protocol_ethernet_ip_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EtherNetIpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EtherNetIpInfo) ProtoMessage() {}

func (x *EtherNetIpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_meta_protocol_ethernet_ip_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EtherNetIpInfo.ProtoReflect.Descriptor instead.
func (*EtherNetIpInfo) Descriptor() ([]byte, []int) {
	return file_meta_protocol_ethernet_ip_proto_rawDescGZIP(), []int{0}
}

func (x *EtherNetIpInfo) GetGenState() uint32 {
	if x != nil && x.GenState != nil {
		return *x.GenState
	}
	return 0
}

func (x *EtherNetIpInfo) GetClass() uint32 {
	if x != nil && x.Class != nil {
		return *x.Class
	}
	return 0
}

func (x *EtherNetIpInfo) GetEkeyCompbit() bool {
	if x != nil && x.EkeyCompbit != nil {
		return *x.EkeyCompbit
	}
	return false
}

func (x *EtherNetIpInfo) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *EtherNetIpInfo) GetLogicalSegmentType() uint32 {
	if x != nil && x.LogicalSegmentType != nil {
		return *x.LogicalSegmentType
	}
	return 0
}

func (x *EtherNetIpInfo) GetLogicalSegmentFormat() string {
	if x != nil && x.LogicalSegmentFormat != nil {
		return *x.LogicalSegmentFormat
	}
	return ""
}

func (x *EtherNetIpInfo) GetDeviceType() uint32 {
	if x != nil && x.DeviceType != nil {
		return *x.DeviceType
	}
	return 0
}

func (x *EtherNetIpInfo) GetEkeyDevType() string {
	if x != nil && x.EkeyDevType != nil {
		return *x.EkeyDevType
	}
	return ""
}

func (x *EtherNetIpInfo) GetCipState() uint32 {
	if x != nil && x.CipState != nil {
		return *x.CipState
	}
	return 0
}

func (x *EtherNetIpInfo) GetBitHeader() uint32 {
	if x != nil && x.BitHeader != nil {
		return *x.BitHeader
	}
	return 0
}

func (x *EtherNetIpInfo) GetState() uint32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *EtherNetIpInfo) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *EtherNetIpInfo) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *EtherNetIpInfo) GetTargetSupplierId() uint32 {
	if x != nil && x.TargetSupplierId != nil {
		return *x.TargetSupplierId
	}
	return 0
}

func (x *EtherNetIpInfo) GetCmextstatus() uint32 {
	if x != nil && x.Cmextstatus != nil {
		return *x.Cmextstatus
	}
	return 0
}

func (x *EtherNetIpInfo) GetCmfWofv() uint32 {
	if x != nil && x.CmfWofv != nil {
		return *x.CmfWofv
	}
	return 0
}

func (x *EtherNetIpInfo) GetCmfWotype() uint32 {
	if x != nil && x.CmfWotype != nil {
		return *x.CmfWotype
	}
	return 0
}

func (x *EtherNetIpInfo) GetCmfWoowner() uint32 {
	if x != nil && x.CmfWoowner != nil {
		return *x.CmfWoowner
	}
	return 0
}

func (x *EtherNetIpInfo) GetCcosc() uint32 {
	if x != nil && x.Ccosc != nil {
		return *x.Ccosc
	}
	return 0
}

func (x *EtherNetIpInfo) GetPcccFncCode() uint32 {
	if x != nil && x.PcccFncCode != nil {
		return *x.PcccFncCode
	}
	return 0
}

var File_meta_protocol_ethernet_ip_proto protoreflect.FileDescriptor

var file_meta_protocol_ethernet_ip_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0xfc, 0x04, 0x0a, 0x0e, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x4e, 0x65, 0x74, 0x49, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x65,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x65,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x65, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x62, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x65, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x62, 0x69, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6b, 0x65, 0x79, 0x44, 0x65,
	0x76, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6b, 0x65,
	0x79, 0x44, 0x65, 0x76, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x69, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x69, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x69, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6d, 0x65, 0x78, 0x74, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6d, 0x65, 0x78, 0x74,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6d, 0x66, 0x57, 0x6f, 0x66,
	0x76, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6d, 0x66, 0x57, 0x6f, 0x66, 0x76,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6d, 0x66, 0x57, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6d, 0x66, 0x57, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6d, 0x66, 0x57, 0x6f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6d, 0x66, 0x57, 0x6f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x63, 0x6f, 0x73, 0x63, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x63, 0x6f, 0x73, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x63, 0x63, 0x63, 0x46, 0x6e, 0x63, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x63, 0x63, 0x63, 0x46,
	0x6e, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x2f, 0x5a, 0x2d, 0x64, 0x69, 0x73, 0x73, 0x65, 0x63,
	0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x75, 0x73,
	0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
}

var (
	file_meta_protocol_ethernet_ip_proto_rawDescOnce sync.Once
	file_meta_protocol_ethernet_ip_proto_rawDescData = file_meta_protocol_ethernet_ip_proto_rawDesc
)

func file_meta_protocol_ethernet_ip_proto_rawDescGZIP() []byte {
	file_meta_protocol_ethernet_ip_proto_rawDescOnce.Do(func() {
		file_meta_protocol_ethernet_ip_proto_rawDescData = protoimpl.X.CompressGZIP(file_meta_protocol_ethernet_ip_proto_rawDescData)
	})
	return file_meta_protocol_ethernet_ip_proto_rawDescData
}

var file_meta_protocol_ethernet_ip_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_meta_protocol_ethernet_ip_proto_goTypes = []any{
	(*EtherNetIpInfo)(nil), // 0: meta.EtherNetIpInfo
}
var file_meta_protocol_ethernet_ip_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_meta_protocol_ethernet_ip_proto_init() }
func file_meta_protocol_ethernet_ip_proto_init() {
	if File_meta_protocol_ethernet_ip_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_meta_protocol_ethernet_ip_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meta_protocol_ethernet_ip_proto_goTypes,
		DependencyIndexes: file_meta_protocol_ethernet_ip_proto_depIdxs,
		MessageInfos:      file_meta_protocol_ethernet_ip_proto_msgTypes,
	}.Build()
	File_meta_protocol_ethernet_ip_proto = out.File
	file_meta_protocol_ethernet_ip_proto_rawDesc = nil
	file_meta_protocol_ethernet_ip_proto_goTypes = nil
	file_meta_protocol_ethernet_ip_proto_depIdxs = nil
}
