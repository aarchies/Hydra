// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.0
// source: meta/protocol/bacnet.proto

package push_model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
type BacNetInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Version         *uint32                `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`                  // BACnet 协议版本号
	Dnet            *string                `protobuf:"bytes,2,opt,name=dnet" json:"dnet,omitempty"`                         // BACnet 目标网络地址
	Controlsrc      *bool                  `protobuf:"varint,3,opt,name=controlsrc" json:"controlsrc,omitempty"`            // BACnet 控制源指定
	Controlres2     *bool                  `protobuf:"varint,4,opt,name=controlres2" json:"controlres2,omitempty"`          // 保留字段，无具体作用
	Dadrmstp        *uint32                `protobuf:"varint,5,opt,name=dadrmstp" json:"dadrmstp,omitempty"`                // BACnet 主站设备地址
	HoPc            *uint32                `protobuf:"varint,6,opt,name=hoPc" json:"hoPc,omitempty"`                        // 数据包转发的网络跳数计数
	Controlres1     *bool                  `protobuf:"varint,7,opt,name=controlres1" json:"controlres1,omitempty"`          // 保留字段，暂未使用
	Controlnet      *bool                  `protobuf:"varint,8,opt,name=controlnet" json:"controlnet,omitempty"`            //BACnet 控制网络字段，NSDU 包含
	Snet            *string                `protobuf:"bytes,9,opt,name=snet" json:"snet,omitempty"`                         //    BACnet 源网络地址
	Controldest     *bool                  `protobuf:"varint,10,opt,name=controldest" json:"controldest,omitempty"`         // BACnet 控制目标指定符
	Sadrmstp        *uint32                `protobuf:"varint,11,opt,name=sadrmstp" json:"sadrmstp,omitempty"`               // BACnet 地址解析协议主站标识
	Dlen            *uint32                `protobuf:"varint,12,opt,name=dlen" json:"dlen,omitempty"`                       // 目的 MAC 层地址长度
	Control         *bool                  `protobuf:"varint,13,opt,name=control" json:"control,omitempty"`                 // BACnet 控制
	Controlexpect   *bool                  `protobuf:"varint,14,opt,name=controlexpect" json:"controlexpect,omitempty"`     // 期待回复的控制
	Controlpriohigh *bool                  `protobuf:"varint,15,opt,name=controlpriohigh" json:"controlpriohigh,omitempty"` // 优先级（高）
	Controlpriolow  *bool                  `protobuf:"varint,16,opt,name=controlpriolow" json:"controlpriolow,omitempty"`   // BACnet 控制低优先级
	Sadreth         *string                `protobuf:"bytes,17,opt,name=sadreth" json:"sadreth,omitempty"`                  // BACNet 以太网源地址
	Slen            *uint32                `protobuf:"varint,18,opt,name=slen" json:"slen,omitempty"`                       // BACnet 源 MAC 地址长度
	Dadreth         *string                `protobuf:"bytes,19,opt,name=dadreth" json:"dadreth,omitempty"`                  // BACnet 目的以太网 MAC 地址
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BacNetInfo) Reset() {
	*x = BacNetInfo{}
	mi := &file_meta_protocol_bacnet_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BacNetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BacNetInfo) ProtoMessage() {}

func (x *BacNetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_meta_protocol_bacnet_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BacNetInfo.ProtoReflect.Descriptor instead.
func (*BacNetInfo) Descriptor() ([]byte, []int) {
	return file_meta_protocol_bacnet_proto_rawDescGZIP(), []int{0}
}

func (x *BacNetInfo) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *BacNetInfo) GetDnet() string {
	if x != nil && x.Dnet != nil {
		return *x.Dnet
	}
	return ""
}

func (x *BacNetInfo) GetControlsrc() bool {
	if x != nil && x.Controlsrc != nil {
		return *x.Controlsrc
	}
	return false
}

func (x *BacNetInfo) GetControlres2() bool {
	if x != nil && x.Controlres2 != nil {
		return *x.Controlres2
	}
	return false
}

func (x *BacNetInfo) GetDadrmstp() uint32 {
	if x != nil && x.Dadrmstp != nil {
		return *x.Dadrmstp
	}
	return 0
}

func (x *BacNetInfo) GetHoPc() uint32 {
	if x != nil && x.HoPc != nil {
		return *x.HoPc
	}
	return 0
}

func (x *BacNetInfo) GetControlres1() bool {
	if x != nil && x.Controlres1 != nil {
		return *x.Controlres1
	}
	return false
}

func (x *BacNetInfo) GetControlnet() bool {
	if x != nil && x.Controlnet != nil {
		return *x.Controlnet
	}
	return false
}

func (x *BacNetInfo) GetSnet() string {
	if x != nil && x.Snet != nil {
		return *x.Snet
	}
	return ""
}

func (x *BacNetInfo) GetControldest() bool {
	if x != nil && x.Controldest != nil {
		return *x.Controldest
	}
	return false
}

func (x *BacNetInfo) GetSadrmstp() uint32 {
	if x != nil && x.Sadrmstp != nil {
		return *x.Sadrmstp
	}
	return 0
}

func (x *BacNetInfo) GetDlen() uint32 {
	if x != nil && x.Dlen != nil {
		return *x.Dlen
	}
	return 0
}

func (x *BacNetInfo) GetControl() bool {
	if x != nil && x.Control != nil {
		return *x.Control
	}
	return false
}

func (x *BacNetInfo) GetControlexpect() bool {
	if x != nil && x.Controlexpect != nil {
		return *x.Controlexpect
	}
	return false
}

func (x *BacNetInfo) GetControlpriohigh() bool {
	if x != nil && x.Controlpriohigh != nil {
		return *x.Controlpriohigh
	}
	return false
}

func (x *BacNetInfo) GetControlpriolow() bool {
	if x != nil && x.Controlpriolow != nil {
		return *x.Controlpriolow
	}
	return false
}

func (x *BacNetInfo) GetSadreth() string {
	if x != nil && x.Sadreth != nil {
		return *x.Sadreth
	}
	return ""
}

func (x *BacNetInfo) GetSlen() uint32 {
	if x != nil && x.Slen != nil {
		return *x.Slen
	}
	return 0
}

func (x *BacNetInfo) GetDadreth() string {
	if x != nil && x.Dadreth != nil {
		return *x.Dadreth
	}
	return ""
}

var File_meta_protocol_bacnet_proto protoreflect.FileDescriptor

var file_meta_protocol_bacnet_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f,
	0x62, 0x61, 0x63, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x22, 0xae, 0x04, 0x0a, 0x0a, 0x42, 0x61, 0x63, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x6e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x6e, 0x65, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x72, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x72, 0x63, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x72, 0x65, 0x73, 0x32, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x72, 0x65, 0x73,
	0x32, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x64, 0x72, 0x6d, 0x73, 0x74, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x61, 0x64, 0x72, 0x6d, 0x73, 0x74, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x6f, 0x50, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x6f, 0x50,
	0x63, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x72, 0x65, 0x73, 0x31,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x72,
	0x65, 0x73, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6e, 0x65,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6e, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6e, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x6e, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x64,
	0x72, 0x6d, 0x73, 0x74, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x61, 0x64,
	0x72, 0x6d, 0x73, 0x74, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6c, 0x65, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x6c, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x70, 0x72, 0x69, 0x6f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x72, 0x69, 0x6f, 0x68,
	0x69, 0x67, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x72,
	0x69, 0x6f, 0x6c, 0x6f, 0x77, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x70, 0x72, 0x69, 0x6f, 0x6c, 0x6f, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x61, 0x64, 0x72, 0x65, 0x74, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x61,
	0x64, 0x72, 0x65, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x65, 0x6e, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6c, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x64,
	0x72, 0x65, 0x74, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x64, 0x72,
	0x65, 0x74, 0x68, 0x42, 0x2f, 0x5a, 0x2d, 0x64, 0x69, 0x73, 0x73, 0x65, 0x63, 0x74, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c,
}

var (
	file_meta_protocol_bacnet_proto_rawDescOnce sync.Once
	file_meta_protocol_bacnet_proto_rawDescData = file_meta_protocol_bacnet_proto_rawDesc
)

func file_meta_protocol_bacnet_proto_rawDescGZIP() []byte {
	file_meta_protocol_bacnet_proto_rawDescOnce.Do(func() {
		file_meta_protocol_bacnet_proto_rawDescData = protoimpl.X.CompressGZIP(file_meta_protocol_bacnet_proto_rawDescData)
	})
	return file_meta_protocol_bacnet_proto_rawDescData
}

var file_meta_protocol_bacnet_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_meta_protocol_bacnet_proto_goTypes = []any{
	(*BacNetInfo)(nil), // 0: meta.BacNetInfo
}
var file_meta_protocol_bacnet_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_meta_protocol_bacnet_proto_init() }
func file_meta_protocol_bacnet_proto_init() {
	if File_meta_protocol_bacnet_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_meta_protocol_bacnet_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meta_protocol_bacnet_proto_goTypes,
		DependencyIndexes: file_meta_protocol_bacnet_proto_depIdxs,
		MessageInfos:      file_meta_protocol_bacnet_proto_msgTypes,
	}.Build()
	File_meta_protocol_bacnet_proto = out.File
	file_meta_protocol_bacnet_proto_rawDesc = nil
	file_meta_protocol_bacnet_proto_goTypes = nil
	file_meta_protocol_bacnet_proto_depIdxs = nil
}
