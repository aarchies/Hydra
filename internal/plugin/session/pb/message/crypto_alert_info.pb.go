// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.0
// source: message/crypto_alert_info.proto

package push_model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 密数据异常告警信息
type CRYPTO_ALERT_INFO struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	CryptoStreamId          *uint64                `protobuf:"varint,1,opt,name=crypto_stream_id,json=cryptoStreamId" json:"crypto_stream_id,omitempty"`                            //	流ID	7214956298192818176
	CryptoEncrypted         *bool                  `protobuf:"varint,2,opt,name=crypto_encrypted,json=cryptoEncrypted" json:"crypto_encrypted,omitempty"`                           //	加密标识	0: 非加密应用；1: 加密应用
	CryptoAppName           *string                `protobuf:"bytes,3,opt,name=crypto_app_name,json=cryptoAppName" json:"crypto_app_name,omitempty"`                                //	应用名称	如高铁管家、高途、高德地图、驾考精灵、驾校宝典、驾校一点通、驴迹导游等
	CryptoAppTypeId         *uint32                `protobuf:"varint,4,opt,name=crypto_app_type_id,json=cryptoAppTypeId" json:"crypto_app_type_id,omitempty"`                       //	应用类型ID	应用类型 ID，1-100 为通用应用类型，101-150 为敏感应用类型，151-250 为行业专属，251 以后为自定义应用
	CryptoAppType           *string                `protobuf:"bytes,5,opt,name=crypto_app_type,json=cryptoAppType" json:"crypto_app_type,omitempty"`                                //	应用类型	"云服务"
	CryptoAppClassId        *uint32                `protobuf:"varint,6,opt,name=crypto_app_class_id,json=cryptoAppClassId" json:"crypto_app_class_id,omitempty"`                    //	应用分类ID
	CryptoAppClass          *string                `protobuf:"bytes,7,opt,name=crypto_app_class,json=cryptoAppClass" json:"crypto_app_class,omitempty"`                             //	应用分类	"云服务"
	CryptoActionType        *string                `protobuf:"bytes,8,opt,name=crypto_action_type,json=cryptoActionType" json:"crypto_action_type,omitempty"`                       //	交互规则类型	如：点击支持、点击 VIP 模块、浏览、检索、检查更新、查地图、柚子街
	AssetIdClient           *uint32                `protobuf:"varint,9,opt,name=asset_id_client,json=assetIdClient" json:"asset_id_client,omitempty"`                               //	客户端资产对应标识符	58
	AssetIdServer           *uint32                `protobuf:"varint,10,opt,name=asset_id_server,json=assetIdServer" json:"asset_id_server,omitempty"`                              //	服务端资产对应标识符	0
	CryptoRiskName          *string                `protobuf:"bytes,11,opt,name=crypto_risk_name,json=cryptoRiskName" json:"crypto_risk_name,omitempty"`                            //	异常标签	"('服务端证书链校验失败', '服务端叶子证书密钥用法异常数字签名', '服务端叶子证书增强密钥用法异常', '支持无认证加密套件', '支持弱加密加密套件', '支持弱摘要加密套件', '冗余密钥交换', '缺失密钥交换', '使用压缩')"
	CryptoRiskLevel         *string                `protobuf:"bytes,12,opt,name=crypto_risk_level,json=cryptoRiskLevel" json:"crypto_risk_level,omitempty"`                         //	风险等级	"低"
	CryptoCertFingerprint   *string                `protobuf:"bytes,13,opt,name=crypto_cert_fingerprint,json=cryptoCertFingerprint" json:"crypto_cert_fingerprint,omitempty"`       //	证书指纹	"79CBC71FAE5C3D630ACC92A6F1BC77C083108DD6"
	CryptoRuleId            *uint64                `protobuf:"varint,14,opt,name=crypto_rule_id,json=cryptoRuleId" json:"crypto_rule_id,omitempty"`                                 //	威胁规则 ID
	CryptoRuleType          *string                `protobuf:"bytes,15,opt,name=crypto_rule_type,json=cryptoRuleType" json:"crypto_rule_type,omitempty"`                            //	威胁规则类型	"标准化规则"
	CryptoThreatSubtype     *string                `protobuf:"bytes,16,opt,name=crypto_threat_subtype,json=cryptoThreatSubtype" json:"crypto_threat_subtype,omitempty"`             //	威胁标签	"TCP 隧道"
	CryptoThreatLevel       *string                `protobuf:"bytes,17,opt,name=crypto_threat_level,json=cryptoThreatLevel" json:"crypto_threat_level,omitempty"`                   //	威胁等级	分为高危、中危和低危
	CryptoThreatFamily      *string                `protobuf:"bytes,18,opt,name=crypto_threat_family,json=cryptoThreatFamily" json:"crypto_threat_family,omitempty"`                //	威胁所属家族	"CobaltStrike"
	CryptoThreatGroup       *string                `protobuf:"bytes,19,opt,name=crypto_threat_group,json=cryptoThreatGroup" json:"crypto_threat_group,omitempty"`                   //	威胁组织	"Sidewinder 响尾蛇"
	CryptoThreatDirection   *string                `protobuf:"bytes,20,opt,name=crypto_threat_direction,json=cryptoThreatDirection" json:"crypto_threat_direction,omitempty"`       //	威胁方向	"俄罗斯"
	CryptoThreatDescription *string                `protobuf:"bytes,21,opt,name=crypto_threat_description,json=cryptoThreatDescription" json:"crypto_threat_description,omitempty"` //	威胁详细描述	"一系列对TLS加密协议的扫描攻击，此类攻击通常针对HTTPS服务，攻击者使用的黑客工具为W3af.1.6.49_2019_kali2018_64"
	CryptoDirection         *string                `protobuf:"bytes,22,opt,name=crypto_direction,json=cryptoDirection" json:"crypto_direction,omitempty"`                           //	攻击方向	入联风险、横向风险、出联风险
	CryptoDetectionState    *string                `protobuf:"bytes,23,opt,name=crypto_detection_state,json=cryptoDetectionState" json:"crypto_detection_state,omitempty"`          //	研判状态	未研判、误报、攻击行为、攻击成功、未知
	CryptoDetectionDescribe *string                `protobuf:"bytes,24,opt,name=crypto_detection_describe,json=cryptoDetectionDescribe" json:"crypto_detection_describe,omitempty"` //	研判原因	"Suricata"
	CryptoHandResult        *string                `protobuf:"bytes,25,opt,name=crypto_hand_result,json=cryptoHandResult" json:"crypto_hand_result,omitempty"`                      //	握手评分	"100"
	CryptoFlowResult        *string                `protobuf:"bytes,26,opt,name=crypto_flow_result,json=cryptoFlowResult" json:"crypto_flow_result,omitempty"`                      //	流模型评分	"100"
	CryptoCertResult        *string                `protobuf:"bytes,27,opt,name=crypto_cert_result,json=cryptoCertResult" json:"crypto_cert_result,omitempty"`                      //	证书评分	"88"
	CryptoDomainResult      *string                `protobuf:"bytes,28,opt,name=crypto_domain_result,json=cryptoDomainResult" json:"crypto_domain_result,omitempty"`                //	DNS评分	"81"
	CryptoResult            *string                `protobuf:"bytes,29,opt,name=crypto_result,json=cryptoResult" json:"crypto_result,omitempty"`                                    //	综合评分	"95"
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CRYPTO_ALERT_INFO) Reset() {
	*x = CRYPTO_ALERT_INFO{}
	mi := &file_message_crypto_alert_info_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRYPTO_ALERT_INFO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRYPTO_ALERT_INFO) ProtoMessage() {}

func (x *CRYPTO_ALERT_INFO) ProtoReflect() protoreflect.Message {
	mi := &file_message_crypto_alert_info_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRYPTO_ALERT_INFO.ProtoReflect.Descriptor instead.
func (*CRYPTO_ALERT_INFO) Descriptor() ([]byte, []int) {
	return file_message_crypto_alert_info_proto_rawDescGZIP(), []int{0}
}

func (x *CRYPTO_ALERT_INFO) GetCryptoStreamId() uint64 {
	if x != nil && x.CryptoStreamId != nil {
		return *x.CryptoStreamId
	}
	return 0
}

func (x *CRYPTO_ALERT_INFO) GetCryptoEncrypted() bool {
	if x != nil && x.CryptoEncrypted != nil {
		return *x.CryptoEncrypted
	}
	return false
}

func (x *CRYPTO_ALERT_INFO) GetCryptoAppName() string {
	if x != nil && x.CryptoAppName != nil {
		return *x.CryptoAppName
	}
	return ""
}

func (x *CRYPTO_ALERT_INFO) GetCryptoAppTypeId() uint32 {
	if x != nil && x.CryptoAppTypeId != nil {
		return *x.CryptoAppTypeId
	}
	return 0
}

func (x *CRYPTO_ALERT_INFO) GetCryptoAppType() string {
	if x != nil && x.CryptoAppType != nil {
		return *x.CryptoAppType
	}
	return ""
}

func (x *CRYPTO_ALERT_INFO) GetCryptoAppClassId() uint32 {
	if x != nil && x.CryptoAppClassId != nil {
		return *x.CryptoAppClassId
	}
	return 0
}

func (x *CRYPTO_ALERT_INFO) GetCryptoAppClass() string {
	if x != nil && x.CryptoAppClass != nil {
		return *x.CryptoAppClass
	}
	return ""
}

func (x *CRYPTO_ALERT_INFO) GetCryptoActionType() string {
	if x != nil && x.CryptoActionType != nil {
		return *x.CryptoActionType
	}
	return ""
}

func (x *CRYPTO_ALERT_INFO) GetAssetIdClient() uint32 {
	if x != nil && x.AssetIdClient != nil {
		return *x.AssetIdClient
	}
	return 0
}

func (x *CRYPTO_ALERT_INFO) GetAssetIdServer() uint32 {
	if x != nil && x.AssetIdServer != nil {
		return *x.AssetIdServer
	}
	return 0
}

func (x *CRYPTO_ALERT_INFO) GetCryptoRiskName() string {
	if x != nil && x.CryptoRiskName != nil {
		return *x.CryptoRiskName
	}
	return ""
}

func (x *CRYPTO_ALERT_INFO) GetCryptoRiskLevel() string {
	if x != nil && x.CryptoRiskLevel != nil {
		return *x.CryptoRiskLevel
	}
	return ""
}

func (x *CRYPTO_ALERT_INFO) GetCryptoCertFingerprint() string {
	if x != nil && x.CryptoCertFingerprint != nil {
		return *x.CryptoCertFingerprint
	}
	return ""
}

func (x *CRYPTO_ALERT_INFO) GetCryptoRuleId() uint64 {
	if x != nil && x.CryptoRuleId != nil {
		return *x.CryptoRuleId
	}
	return 0
}

func (x *CRYPTO_ALERT_INFO) GetCryptoRuleType() string {
	if x != nil && x.CryptoRuleType != nil {
		return *x.CryptoRuleType
	}
	return ""
}

func (x *CRYPTO_ALERT_INFO) GetCryptoThreatSubtype() string {
	if x != nil && x.CryptoThreatSubtype != nil {
		return *x.CryptoThreatSubtype
	}
	return ""
}

func (x *CRYPTO_ALERT_INFO) GetCryptoThreatLevel() string {
	if x != nil && x.CryptoThreatLevel != nil {
		return *x.CryptoThreatLevel
	}
	return ""
}

func (x *CRYPTO_ALERT_INFO) GetCryptoThreatFamily() string {
	if x != nil && x.CryptoThreatFamily != nil {
		return *x.CryptoThreatFamily
	}
	return ""
}

func (x *CRYPTO_ALERT_INFO) GetCryptoThreatGroup() string {
	if x != nil && x.CryptoThreatGroup != nil {
		return *x.CryptoThreatGroup
	}
	return ""
}

func (x *CRYPTO_ALERT_INFO) GetCryptoThreatDirection() string {
	if x != nil && x.CryptoThreatDirection != nil {
		return *x.CryptoThreatDirection
	}
	return ""
}

func (x *CRYPTO_ALERT_INFO) GetCryptoThreatDescription() string {
	if x != nil && x.CryptoThreatDescription != nil {
		return *x.CryptoThreatDescription
	}
	return ""
}

func (x *CRYPTO_ALERT_INFO) GetCryptoDirection() string {
	if x != nil && x.CryptoDirection != nil {
		return *x.CryptoDirection
	}
	return ""
}

func (x *CRYPTO_ALERT_INFO) GetCryptoDetectionState() string {
	if x != nil && x.CryptoDetectionState != nil {
		return *x.CryptoDetectionState
	}
	return ""
}

func (x *CRYPTO_ALERT_INFO) GetCryptoDetectionDescribe() string {
	if x != nil && x.CryptoDetectionDescribe != nil {
		return *x.CryptoDetectionDescribe
	}
	return ""
}

func (x *CRYPTO_ALERT_INFO) GetCryptoHandResult() string {
	if x != nil && x.CryptoHandResult != nil {
		return *x.CryptoHandResult
	}
	return ""
}

func (x *CRYPTO_ALERT_INFO) GetCryptoFlowResult() string {
	if x != nil && x.CryptoFlowResult != nil {
		return *x.CryptoFlowResult
	}
	return ""
}

func (x *CRYPTO_ALERT_INFO) GetCryptoCertResult() string {
	if x != nil && x.CryptoCertResult != nil {
		return *x.CryptoCertResult
	}
	return ""
}

func (x *CRYPTO_ALERT_INFO) GetCryptoDomainResult() string {
	if x != nil && x.CryptoDomainResult != nil {
		return *x.CryptoDomainResult
	}
	return ""
}

func (x *CRYPTO_ALERT_INFO) GetCryptoResult() string {
	if x != nil && x.CryptoResult != nil {
		return *x.CryptoResult
	}
	return ""
}

var File_message_crypto_alert_info_proto protoreflect.FileDescriptor

var file_message_crypto_alert_info_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd2, 0x0a, 0x0a, 0x11, 0x43,
	0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a,
	0x12, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x69, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x72, 0x69,
	0x73, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x36, 0x0a, 0x17, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x66,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52,
	0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x74, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x5f, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x54, 0x68, 0x72, 0x65, 0x61, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x2e, 0x0a,
	0x13, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x54, 0x68, 0x72, 0x65, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x36, 0x0a,
	0x17, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x5f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x68, 0x72, 0x65, 0x61, 0x74, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42,
	0x6b, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x0f, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x5a, 0x35, 0x64, 0x69, 0x73, 0x73, 0x65, 0x63, 0x74, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x3b, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
}

var (
	file_message_crypto_alert_info_proto_rawDescOnce sync.Once
	file_message_crypto_alert_info_proto_rawDescData = file_message_crypto_alert_info_proto_rawDesc
)

func file_message_crypto_alert_info_proto_rawDescGZIP() []byte {
	file_message_crypto_alert_info_proto_rawDescOnce.Do(func() {
		file_message_crypto_alert_info_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_crypto_alert_info_proto_rawDescData)
	})
	return file_message_crypto_alert_info_proto_rawDescData
}

var file_message_crypto_alert_info_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_message_crypto_alert_info_proto_goTypes = []any{
	(*CRYPTO_ALERT_INFO)(nil), // 0: Message.CRYPTO_ALERT_INFO
}
var file_message_crypto_alert_info_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_message_crypto_alert_info_proto_init() }
func file_message_crypto_alert_info_proto_init() {
	if File_message_crypto_alert_info_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_crypto_alert_info_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_crypto_alert_info_proto_goTypes,
		DependencyIndexes: file_message_crypto_alert_info_proto_depIdxs,
		MessageInfos:      file_message_crypto_alert_info_proto_msgTypes,
	}.Build()
	File_message_crypto_alert_info_proto = out.File
	file_message_crypto_alert_info_proto_rawDesc = nil
	file_message_crypto_alert_info_proto_goTypes = nil
	file_message_crypto_alert_info_proto_depIdxs = nil
}
