// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.0
// source: alert_log.proto

package push_model

import (
	base "dissect/internal/plugin/session/pb/base"
	message "dissect/internal/plugin/session/pb/message"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ALERT_LOG struct {
	state            protoimpl.MessageState     `protogen:"open.v1"`
	Guid             *string                    `protobuf:"bytes,1,req,name=guid" json:"guid,omitempty"`                                                       //	日志全局ID	唯一 (设备IP+时间戳 SHA-256)
	Time             *string                    `protobuf:"bytes,2,req,name=time" json:"time,omitempty"`                                                       //	告警时间	毫秒级,yyyy-mm-dd hh:mm:ss.ms
	LineInfo         *string                    `protobuf:"bytes,3,req,name=line_info,json=lineInfo" json:"line_info,omitempty"`                               //	线路号	51字节头
	Sip              *base.IP_INFO              `protobuf:"bytes,4,req,name=sip" json:"sip,omitempty"`                                                         // 源IP信息
	Dip              *base.IP_INFO              `protobuf:"bytes,5,req,name=dip" json:"dip,omitempty"`                                                         // 目的IP信息;
	Aip              *base.IP_INFO              `protobuf:"bytes,6,req,name=aip" json:"aip,omitempty"`                                                         // 受害者IP信息;
	Vip              *base.IP_INFO              `protobuf:"bytes,7,req,name=vip" json:"vip,omitempty"`                                                         // 攻击IP信息;
	SensorIp         *string                    `protobuf:"bytes,8,req,name=sensor_ip,json=sensorIp" json:"sensor_ip,omitempty"`                               //	传感器IP
	VendorId         *string                    `protobuf:"bytes,9,req,name=vendor_id,json=vendorId" json:"vendor_id,omitempty"`                               //	供应商ID
	LRAggregateValue *string                    `protobuf:"bytes,10,req,name=LR_aggregate_value,json=LRAggregateValue" json:"LR_aggregate_value,omitempty"`    //	最近短时聚合值	根据不同的威胁类型采用不同的聚合策略
	LRFirstAlertDate *uint64                    `protobuf:"varint,11,req,name=LR_first_alert_date,json=LRFirstAlertDate" json:"LR_first_alert_date,omitempty"` //	最近短时首次告警时刻
	LRLastAlertDate  *uint64                    `protobuf:"varint,12,req,name=LR_last_alert_date,json=LRLastAlertDate" json:"LR_last_alert_date,omitempty"`    //	最近短时末次告警时刻
	LRAlertTimes     *uint32                    `protobuf:"varint,13,req,name=LR_alert_times,json=LRAlertTimes" json:"LR_alert_times,omitempty"`               //	最近短时告警次数
	DetectType       *uint32                    `protobuf:"varint,14,req,name=detect_type,json=detectType" json:"detect_type,omitempty"`                       //	检测类型	取值范围为后文中*_alert_info的序列编号
	ThreatType       *uint32                    `protobuf:"varint,15,req,name=threat_type,json=threatType" json:"threat_type,omitempty"`                       //	威胁类型	见威胁类型列表
	Severity         *uint32                    `protobuf:"varint,16,req,name=severity" json:"severity,omitempty"`                                             //	威胁等级	0（安全）、1（低危）、2（中危）、3（高危）、4（危急），危急是未公开披露APT或独家高价值情报
	KillChain        *string                    `protobuf:"bytes,17,req,name=kill_chain,json=killChain" json:"kill_chain,omitempty"`                           //	杀伤链标签	侦察跟踪、武器构建、载荷投递、漏洞利用、安装植入、命令控制、目标达成
	Tactic           *string                    `protobuf:"bytes,18,opt,name=tactic" json:"tactic,omitempty"`                                                  //	ATT&CK策略标签	TA0001（初始访问）
	Technique        *string                    `protobuf:"bytes,19,opt,name=technique" json:"technique,omitempty"`                                            //	ATT&CK技术标签	T1566（网络钓鱼）
	Confidence       *string                    `protobuf:"bytes,20,req,name=confidence" json:"confidence,omitempty"`                                          //	置信度	低、中、高
	TranProto        *string                    `protobuf:"bytes,21,req,name=tran_proto,json=tranProto" json:"tran_proto,omitempty"`                           //	传输层协议	TCP、UDP、SCTP
	AppProto         *string                    `protobuf:"bytes,22,opt,name=app_proto,json=appProto" json:"app_proto,omitempty"`                              //	应用层协议	HTTP、TLS、SSH
	MetaData         []byte                     `protobuf:"bytes,23,opt,name=meta_data,json=metaData" json:"meta_data,omitempty"`                              //	原始元数据	产生告警的链接原始元数据，封装为一个字段，参考SDX网防目标元数据存储规范
	RawData          *string                    `protobuf:"bytes,24,opt,name=raw_data,json=rawData" json:"raw_data,omitempty"`                                 //	原始数据（存储路径）	产生告警的原始数据样本在网络文件系统中的存储路径
	IocAlertInfo     *message.IOC_ALERT_INFO    `protobuf:"bytes,100,opt,name=ioc_alert_info,json=iocAlertInfo" json:"ioc_alert_info,omitempty"`               //	失陷情报告警信息	封装格式
	IobAlertInfo     *message.IOB_ALERT_INFO    `protobuf:"bytes,101,opt,name=iob_alert_info,json=iobAlertInfo" json:"iob_alert_info,omitempty"`               //	异常行为告警信息	封装格式
	IoaAlertInfo     *message.IOA_ALERT_INFO    `protobuf:"bytes,102,opt,name=ioa_alert_info,json=ioaAlertInfo" json:"ioa_alert_info,omitempty"`               //	攻击利用告警信息	封装格式
	IiotAlertInfo    *message.IIOT_ALERT_INFO   `protobuf:"bytes,103,opt,name=iiot_alert_info,json=iiotAlertInfo" json:"iiot_alert_info,omitempty"`            //	工业物联网告警信息	封装格式
	FileAlertInfo    *message.FILE_ALERT_INFO   `protobuf:"bytes,104,opt,name=file_alert_info,json=fileAlertInfo" json:"file_alert_info,omitempty"`            //	文件检测告警信息	封装格式
	CryptoAlertInfo  *message.CRYPTO_ALERT_INFO `protobuf:"bytes,105,opt,name=crypto_alert_info,json=cryptoAlertInfo" json:"crypto_alert_info,omitempty"`      //	密数据异常告警信息	封装格式
	CertAlertInfo    *message.CERT_ALERT_INFO   `protobuf:"bytes,106,opt,name=cert_alert_info,json=certAlertInfo" json:"cert_alert_info,omitempty"`            //	证书异常告警信息	封装格式
	MailAlertInfo    *message.MAIL_ALERT_INFO   `protobuf:"bytes,107,opt,name=mail_alert_info,json=mailAlertInfo" json:"mail_alert_info,omitempty"`            //	邮件威胁告警信息	封装格式
	MobileAlertInfo  *message.MOBILE_ALERT_INFO `protobuf:"bytes,108,opt,name=mobile_alert_info,json=mobileAlertInfo" json:"mobile_alert_info,omitempty"`      //	移动网威胁告警信息	封装格式
	ProtoAlertInfo   *message.PROTO_ALERT_INFO  `protobuf:"bytes,109,opt,name=proto_alert_info,json=protoAlertInfo" json:"proto_alert_info,omitempty"`         //	特色协议威胁告警信息	封装格式
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ALERT_LOG) Reset() {
	*x = ALERT_LOG{}
	mi := &file_alert_log_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ALERT_LOG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ALERT_LOG) ProtoMessage() {}

func (x *ALERT_LOG) ProtoReflect() protoreflect.Message {
	mi := &file_alert_log_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ALERT_LOG.ProtoReflect.Descriptor instead.
func (*ALERT_LOG) Descriptor() ([]byte, []int) {
	return file_alert_log_proto_rawDescGZIP(), []int{0}
}

func (x *ALERT_LOG) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *ALERT_LOG) GetTime() string {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return ""
}

func (x *ALERT_LOG) GetLineInfo() string {
	if x != nil && x.LineInfo != nil {
		return *x.LineInfo
	}
	return ""
}

func (x *ALERT_LOG) GetSip() *base.IP_INFO {
	if x != nil {
		return x.Sip
	}
	return nil
}

func (x *ALERT_LOG) GetDip() *base.IP_INFO {
	if x != nil {
		return x.Dip
	}
	return nil
}

func (x *ALERT_LOG) GetAip() *base.IP_INFO {
	if x != nil {
		return x.Aip
	}
	return nil
}

func (x *ALERT_LOG) GetVip() *base.IP_INFO {
	if x != nil {
		return x.Vip
	}
	return nil
}

func (x *ALERT_LOG) GetSensorIp() string {
	if x != nil && x.SensorIp != nil {
		return *x.SensorIp
	}
	return ""
}

func (x *ALERT_LOG) GetVendorId() string {
	if x != nil && x.VendorId != nil {
		return *x.VendorId
	}
	return ""
}

func (x *ALERT_LOG) GetLRAggregateValue() string {
	if x != nil && x.LRAggregateValue != nil {
		return *x.LRAggregateValue
	}
	return ""
}

func (x *ALERT_LOG) GetLRFirstAlertDate() uint64 {
	if x != nil && x.LRFirstAlertDate != nil {
		return *x.LRFirstAlertDate
	}
	return 0
}

func (x *ALERT_LOG) GetLRLastAlertDate() uint64 {
	if x != nil && x.LRLastAlertDate != nil {
		return *x.LRLastAlertDate
	}
	return 0
}

func (x *ALERT_LOG) GetLRAlertTimes() uint32 {
	if x != nil && x.LRAlertTimes != nil {
		return *x.LRAlertTimes
	}
	return 0
}

func (x *ALERT_LOG) GetDetectType() uint32 {
	if x != nil && x.DetectType != nil {
		return *x.DetectType
	}
	return 0
}

func (x *ALERT_LOG) GetThreatType() uint32 {
	if x != nil && x.ThreatType != nil {
		return *x.ThreatType
	}
	return 0
}

func (x *ALERT_LOG) GetSeverity() uint32 {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return 0
}

func (x *ALERT_LOG) GetKillChain() string {
	if x != nil && x.KillChain != nil {
		return *x.KillChain
	}
	return ""
}

func (x *ALERT_LOG) GetTactic() string {
	if x != nil && x.Tactic != nil {
		return *x.Tactic
	}
	return ""
}

func (x *ALERT_LOG) GetTechnique() string {
	if x != nil && x.Technique != nil {
		return *x.Technique
	}
	return ""
}

func (x *ALERT_LOG) GetConfidence() string {
	if x != nil && x.Confidence != nil {
		return *x.Confidence
	}
	return ""
}

func (x *ALERT_LOG) GetTranProto() string {
	if x != nil && x.TranProto != nil {
		return *x.TranProto
	}
	return ""
}

func (x *ALERT_LOG) GetAppProto() string {
	if x != nil && x.AppProto != nil {
		return *x.AppProto
	}
	return ""
}

func (x *ALERT_LOG) GetMetaData() []byte {
	if x != nil {
		return x.MetaData
	}
	return nil
}

func (x *ALERT_LOG) GetRawData() string {
	if x != nil && x.RawData != nil {
		return *x.RawData
	}
	return ""
}

func (x *ALERT_LOG) GetIocAlertInfo() *message.IOC_ALERT_INFO {
	if x != nil {
		return x.IocAlertInfo
	}
	return nil
}

func (x *ALERT_LOG) GetIobAlertInfo() *message.IOB_ALERT_INFO {
	if x != nil {
		return x.IobAlertInfo
	}
	return nil
}

func (x *ALERT_LOG) GetIoaAlertInfo() *message.IOA_ALERT_INFO {
	if x != nil {
		return x.IoaAlertInfo
	}
	return nil
}

func (x *ALERT_LOG) GetIiotAlertInfo() *message.IIOT_ALERT_INFO {
	if x != nil {
		return x.IiotAlertInfo
	}
	return nil
}

func (x *ALERT_LOG) GetFileAlertInfo() *message.FILE_ALERT_INFO {
	if x != nil {
		return x.FileAlertInfo
	}
	return nil
}

func (x *ALERT_LOG) GetCryptoAlertInfo() *message.CRYPTO_ALERT_INFO {
	if x != nil {
		return x.CryptoAlertInfo
	}
	return nil
}

func (x *ALERT_LOG) GetCertAlertInfo() *message.CERT_ALERT_INFO {
	if x != nil {
		return x.CertAlertInfo
	}
	return nil
}

func (x *ALERT_LOG) GetMailAlertInfo() *message.MAIL_ALERT_INFO {
	if x != nil {
		return x.MailAlertInfo
	}
	return nil
}

func (x *ALERT_LOG) GetMobileAlertInfo() *message.MOBILE_ALERT_INFO {
	if x != nil {
		return x.MobileAlertInfo
	}
	return nil
}

func (x *ALERT_LOG) GetProtoAlertInfo() *message.PROTO_ALERT_INFO {
	if x != nil {
		return x.ProtoAlertInfo
	}
	return nil
}

var File_alert_log_proto protoreflect.FileDescriptor

var file_alert_log_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x12, 0x62, 0x61, 0x73, 0x65,
	0x2f, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x69, 0x69, 0x6f, 0x74, 0x5f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x69, 0x6f, 0x61, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2f, 0x69, 0x6f, 0x62, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2f, 0x69, 0x6f, 0x63, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f,
	0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xab, 0x0b, 0x0a, 0x09, 0x41, 0x4c, 0x45, 0x52, 0x54,
	0x5f, 0x4c, 0x4f, 0x47, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x03, 0x73, 0x69, 0x70,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x49, 0x50, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x03, 0x73, 0x69, 0x70, 0x12, 0x22, 0x0a,
	0x03, 0x64, 0x69, 0x70, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x50, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x03, 0x64, 0x69,
	0x70, 0x12, 0x22, 0x0a, 0x03, 0x61, 0x69, 0x70, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x50, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x52, 0x03, 0x61, 0x69, 0x70, 0x12, 0x22, 0x0a, 0x03, 0x76, 0x69, 0x70, 0x18, 0x07, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x50, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x03, 0x76, 0x69, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x4c, 0x52, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x10, 0x4c, 0x52, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2d, 0x0a, 0x13, 0x4c, 0x52, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x04, 0x52, 0x10,
	0x4c, 0x52, 0x46, 0x69, 0x72, 0x73, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x2b, 0x0a, 0x12, 0x4c, 0x52, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0f, 0x4c, 0x52,
	0x4c, 0x61, 0x73, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x4c, 0x52, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x0d, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x4c, 0x52, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x10, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18,
	0x11, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x63, 0x74, 0x69, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x63, 0x74, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x15, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x0e, 0x69, 0x6f,
	0x63, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x4f, 0x43,
	0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x0c, 0x69, 0x6f, 0x63,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0e, 0x69, 0x6f, 0x62,
	0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x65, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x4f, 0x42, 0x5f,
	0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x0c, 0x69, 0x6f, 0x62, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0e, 0x69, 0x6f, 0x61, 0x5f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x4f, 0x41, 0x5f, 0x41,
	0x4c, 0x45, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x0c, 0x69, 0x6f, 0x61, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0f, 0x69, 0x69, 0x6f, 0x74, 0x5f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x49, 0x4f, 0x54, 0x5f,
	0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x0d, 0x69, 0x69, 0x6f, 0x74,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x68, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x0d, 0x66, 0x69,
	0x6c, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x11, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x52, 0x0f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x41, 0x4c, 0x45, 0x52,
	0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x4c,
	0x45, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x0d, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x11, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x6c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x4f, 0x42,
	0x49, 0x4c, 0x45, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x0f,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x43, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x2f, 0x5a, 0x2d, 0x64, 0x69, 0x73, 0x73, 0x65, 0x63, 0x74, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c,
}

var (
	file_alert_log_proto_rawDescOnce sync.Once
	file_alert_log_proto_rawDescData = file_alert_log_proto_rawDesc
)

func file_alert_log_proto_rawDescGZIP() []byte {
	file_alert_log_proto_rawDescOnce.Do(func() {
		file_alert_log_proto_rawDescData = protoimpl.X.CompressGZIP(file_alert_log_proto_rawDescData)
	})
	return file_alert_log_proto_rawDescData
}

var file_alert_log_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_alert_log_proto_goTypes = []any{
	(*ALERT_LOG)(nil),                 // 0: Message.ALERT_LOG
	(*base.IP_INFO)(nil),              // 1: Message.IP_INFO
	(*message.IOC_ALERT_INFO)(nil),    // 2: Message.IOC_ALERT_INFO
	(*message.IOB_ALERT_INFO)(nil),    // 3: Message.IOB_ALERT_INFO
	(*message.IOA_ALERT_INFO)(nil),    // 4: Message.IOA_ALERT_INFO
	(*message.IIOT_ALERT_INFO)(nil),   // 5: Message.IIOT_ALERT_INFO
	(*message.FILE_ALERT_INFO)(nil),   // 6: Message.FILE_ALERT_INFO
	(*message.CRYPTO_ALERT_INFO)(nil), // 7: Message.CRYPTO_ALERT_INFO
	(*message.CERT_ALERT_INFO)(nil),   // 8: Message.CERT_ALERT_INFO
	(*message.MAIL_ALERT_INFO)(nil),   // 9: Message.MAIL_ALERT_INFO
	(*message.MOBILE_ALERT_INFO)(nil), // 10: Message.MOBILE_ALERT_INFO
	(*message.PROTO_ALERT_INFO)(nil),  // 11: Message.PROTO_ALERT_INFO
}
var file_alert_log_proto_depIdxs = []int32{
	1,  // 0: Message.ALERT_LOG.sip:type_name -> Message.IP_INFO
	1,  // 1: Message.ALERT_LOG.dip:type_name -> Message.IP_INFO
	1,  // 2: Message.ALERT_LOG.aip:type_name -> Message.IP_INFO
	1,  // 3: Message.ALERT_LOG.vip:type_name -> Message.IP_INFO
	2,  // 4: Message.ALERT_LOG.ioc_alert_info:type_name -> Message.IOC_ALERT_INFO
	3,  // 5: Message.ALERT_LOG.iob_alert_info:type_name -> Message.IOB_ALERT_INFO
	4,  // 6: Message.ALERT_LOG.ioa_alert_info:type_name -> Message.IOA_ALERT_INFO
	5,  // 7: Message.ALERT_LOG.iiot_alert_info:type_name -> Message.IIOT_ALERT_INFO
	6,  // 8: Message.ALERT_LOG.file_alert_info:type_name -> Message.FILE_ALERT_INFO
	7,  // 9: Message.ALERT_LOG.crypto_alert_info:type_name -> Message.CRYPTO_ALERT_INFO
	8,  // 10: Message.ALERT_LOG.cert_alert_info:type_name -> Message.CERT_ALERT_INFO
	9,  // 11: Message.ALERT_LOG.mail_alert_info:type_name -> Message.MAIL_ALERT_INFO
	10, // 12: Message.ALERT_LOG.mobile_alert_info:type_name -> Message.MOBILE_ALERT_INFO
	11, // 13: Message.ALERT_LOG.proto_alert_info:type_name -> Message.PROTO_ALERT_INFO
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_alert_log_proto_init() }
func file_alert_log_proto_init() {
	if File_alert_log_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_alert_log_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_alert_log_proto_goTypes,
		DependencyIndexes: file_alert_log_proto_depIdxs,
		MessageInfos:      file_alert_log_proto_msgTypes,
	}.Build()
	File_alert_log_proto = out.File
	file_alert_log_proto_rawDesc = nil
	file_alert_log_proto_goTypes = nil
	file_alert_log_proto_depIdxs = nil
}
